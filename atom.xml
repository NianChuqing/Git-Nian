<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lao Nian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-05T11:14:29.288Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dart学习笔记 (六)</title>
    <link href="http://yoursite.com/2020/04/05/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>http://yoursite.com/2020/04/05/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/</id>
    <published>2020-04-05T11:14:01.000Z</published>
    <updated>2020-04-05T11:14:29.288Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类</strong></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;类&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (五)</title>
    <link href="http://yoursite.com/2020/04/02/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>http://yoursite.com/2020/04/02/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/</id>
    <published>2020-04-02T13:05:43.000Z</published>
    <updated>2020-04-05T11:13:00.280Z</updated>
    
    <content type="html"><![CDATA[<p><strong>函数 , 自定义方法 , 方法的传参 , 可选参数和命名参数 , 给方法传入方法 , 箭头函数 , 函数的相互调用 , 匿名方法 , 自执行方法 , 方法的递归 , 全局变量和局部变量 , 闭包</strong></p><a id="more"></a><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h3><ul><li><p>Dart自带的函数为内置函数 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'print是内置函数'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义方法的基本格式 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">返回类型 方法名称 (参数<span class="number">1.</span>..)&#123;</span><br><span class="line">    方法体  </span><br><span class="line">        <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> printInfo()&#123;                  <span class="comment">//自定义方法方法名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是一个自定义方法'</span>);     <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义方法可以在入口方法之外定义,也可以在入口以内定义,但调用必须在入口以内调用</p></li><li><p>一个方法可以嵌套另外一个方法</p><p>例1:在入口方法内调用自定义函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是一个自定义方法'</span>);</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    printInfo();</span><br><span class="line">&#125;                                  <span class="comment">//输出: 我是一个自定义方法</span></span><br></pre></td></tr></table></figure><p>例2:吧指定类型的myNum返回到getNum方法并打印输出</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line"><span class="built_in">int</span> getNum()&#123;                  <span class="comment">//指定返回类型为int类型,非int类型会报错,返回类型也可以是List,String</span></span><br><span class="line">    <span class="keyword">var</span> myNum=<span class="number">123</span>;             <span class="comment">//定义myNum=123</span></span><br><span class="line">    <span class="keyword">return</span> myNum;              <span class="comment">//吧myNum的值返回给getNum</span></span><br><span class="line">&#125;    </span><br><span class="line">    <span class="keyword">var</span> n=getNum();            <span class="comment">//吧getNum方法赋值给n</span></span><br><span class="line">    <span class="built_in">print</span>(n);                  <span class="comment">//打印n输出: 123</span></span><br><span class="line">    <span class="built_in">print</span>(getNum());           <span class="comment">//因为吧myNum的值返回给了getNum所以也可以直接打印getNum 输出: 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例3:返回值固定为String</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> tast()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'你好'</span>;          </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(tast());</span><br></pre></td></tr></table></figure></li><li><p>以上举例中的方法全都为<strong>‘<u>全作用域</u>‘</strong>,可以在入口方法内使用</p></li><li><p>如果是在’<strong><u>①自定义方法中自定义的②方法</u></strong>‘则为<strong><u>‘局部作用域’</u></strong>,仅可在①(本自定义方法的上层自定义方法)中使用</p><p>例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> xxx()&#123;</span><br><span class="line">    aaa()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'这是一个局部作用域方法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法的传参"><a href="#方法的传参" class="headerlink" title="方法的传参"></a>方法的传参</h3><ul><li><p><strong>形参</strong>:出现在函数定义中，在整个函数体内都可以使用， 离开该函数则不能使用</p><ul><li>形参可以有多个,形参可以固定类型</li></ul></li><li><p><strong>实参</strong>:出现在主调函数中，进入被调函数后，实参变量也不能使用</p></li><li><p>形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量</p></li><li><p>实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。因此应预先用赋值，输入等办法使参数获得确定值</p></li><li><p>例1:定义一个方法,求1到n的所有数的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> myNum(<span class="built_in">int</span> n)&#123;               <span class="comment">//形参n,返回类型为int</span></span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n=myNum(<span class="number">100</span>);                <span class="comment">//100为实参,给方法myNum的形参n传入参数100,赋值给n</span></span><br><span class="line"><span class="built_in">print</span>(n);                        <span class="comment">//输出: 5050</span></span><br><span class="line"><span class="built_in">print</span>(myNum(<span class="number">60</span>));                <span class="comment">//给方法myNum的形参n传入实参60并打印输出: 1830</span></span><br></pre></td></tr></table></figure><p>例2:定义一个方法,打印用户信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user,<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>-----年龄:<span class="subst">$age</span>'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p=printUserInfo(<span class="string">'老念'</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">print</span>(p);</span><br></pre></td></tr></table></figure></li></ul><h3 id="可选参数和命名参数"><a href="#可选参数和命名参数" class="headerlink" title="可选参数和命名参数"></a>可选参数和命名参数</h3><ul><li><p>使用[ ]定义可选参数,可选参数放在参数的最后,用<strong>逗,号</strong>分隔</p></li><li><p>一般参数是在调用时必须传入实参,可选参数为可填可不填</p></li><li><p>可以有多个可选参数</p></li><li><p>传入实参时必须按照定义参数的顺序填写</p><p>例1:定义一个可选参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user,<span class="built_in">int</span> age,[<span class="built_in">String</span> sex])&#123;     <span class="comment">//可选参数sex</span></span><br><span class="line">    <span class="keyword">if</span>(sex!=<span class="keyword">null</span>)&#123;                                          <span class="comment">//如果sex不等于null,则执行下面的内容null:不存在,空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>----年龄:<span class="subst">$age</span>----性别:<span class="subst">$sex</span>'</span>;               </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                                                  <span class="comment">//否则执行下面内容,就是如果可选参数sex是空的,则在下面输出时候打印出 性别保密</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>----年龄:<span class="subst">$age</span>----性别保密'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p=printUserInfo(<span class="string">'老念'</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> f=printUserInfo(<span class="string">'张三'</span>,<span class="number">35</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="built_in">print</span>(p);                                                   <span class="comment">//输出: 姓名:老念----年龄:25----性别保密</span></span><br><span class="line"><span class="built_in">print</span>(f);                                                   <span class="comment">//输出: 姓名:张三----年龄:35----性别:男</span></span><br></pre></td></tr></table></figure><p>例2:定义一个带默认参数的可选参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user,[<span class="built_in">String</span> sex=<span class="string">'男'</span>,<span class="built_in">int</span> age])   </span><br><span class="line"><span class="comment">//如果没有赋予sex实参,则默认为'男',如果赋予了参数,则将覆盖默认参数</span></span><br></pre></td></tr></table></figure><p>例3:定义一个命名参数{ }</p><ul><li>命名参数同时也是可选参数也可以指定默认参数</li><li>命名参数可有多个</li><li>命名参数在传参时只要带上名字,可以不按定义参数的顺序填写,所以如果需要多个可选参数的情况下最好使用命名参数的方式定义</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user, &#123;<span class="built_in">int</span> age, <span class="built_in">String</span> sex = <span class="string">'男'</span>&#125;) &#123;   <span class="comment">//使用大括号定义一个命名参数age,和一个带默认参数的命名参数sex</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>---年龄:<span class="subst">$age</span>---性别:<span class="subst">$sex</span>'</span>;         </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = printUserInfo(<span class="string">'张三'</span>, sex: <span class="string">'女'</span>);                           <span class="comment">//命名参数必须带上名字比如sex:'女',</span></span><br><span class="line"><span class="keyword">var</span> f = printUserInfo(<span class="string">'张三'</span>, age: <span class="number">20</span>);                             <span class="comment">//命名参数可不按定义顺序传入,同时默认参数也会生效</span></span><br><span class="line"><span class="built_in">print</span>(p);                                                          <span class="comment">//输出: 姓名:张三---年龄:null---性别:女</span></span><br><span class="line"><span class="built_in">print</span>(f);                                                          <span class="comment">//输出: 姓名:张三---年龄:20---性别:男</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="给方法传入方法"><a href="#给方法传入方法" class="headerlink" title="给方法传入方法"></a>给方法传入方法</h3><ul><li><p>如何实现一个把方法当做参数的方法 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn1()&#123;                    <span class="comment">//自定义方法fn1,方法体为输出fn1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'fn1'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn2(fn)&#123;                  <span class="comment">//自定义方法fn2,方法体为运行形参处传入的实参方法</span></span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line">fn2(fn1);                 <span class="comment">//调用fn2传入实参fn1就会执行fn1方法体输出: fn1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li><p>箭头函数只能写一行,箭头函数不能写多句话</p></li><li><p>箭头函数一定要带箭头=&gt;,箭头函数可以使用三目运算的方法写</p><p>例1:使用forEach循环遍历list,然后简化为箭头函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach((value)&#123;</span><br><span class="line">  <span class="built_in">print</span>(value);</span><br><span class="line">&#125;);                                     <span class="comment">//输出: 1 2 3</span></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach((value)=&gt;<span class="built_in">print</span>(value));    <span class="comment">//简化为箭头函数,输出: 1 2 3</span></span><br></pre></td></tr></table></figure><p>例2:修改数组中的数据,让数组中大于2的数值乘以2,然后简化为箭头函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newlist=list.map((value)&#123;</span><br><span class="line">  <span class="keyword">if</span>(value&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newlist.toList());                <span class="comment">//输出: [1, 2, 6, 8, 10]                </span></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newlist=list.map((value)=&gt;value&gt;<span class="number">2</span>?value*<span class="number">2</span>:value);</span><br><span class="line"><span class="built_in">print</span>(newlist.toList());                <span class="comment">//输出: [1, 2, 6, 8, 10]</span></span><br><span class="line"><span class="comment">//因为箭头函数只能写一行所以使用三目运算,=&gt;为箭头函数,三目运算中?为if,:为else</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的相互调用"><a href="#函数的相互调用" class="headerlink" title="函数的相互调用"></a>函数的相互调用</h3><ul><li><p>函数之间的调用例如:</p><p>例:自定义方法aNum来判断一个数是否为偶数,自定义方法bNum,在自定义方法bNum中调用自定义方法aNum来打印1~n之间所有偶数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> aNum(<span class="built_in">int</span> n)&#123;                <span class="comment">//bool类型自定义方法,形参为int n,</span></span><br><span class="line">  <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;                    <span class="comment">//如果n是偶数则返回true给aNum</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">  &#125;                              <span class="comment">//else可以不写,也不用写大括号</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;                  <span class="comment">//否则返回false</span></span><br><span class="line">&#125;</span><br><span class="line">bNum(<span class="built_in">int</span> n)&#123;                     <span class="comment">//自定义方法bNum,形参为int n</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;         <span class="comment">//for循环</span></span><br><span class="line">    <span class="keyword">if</span>(aNum(i))&#123;                 <span class="comment">//调用aNum吧i当做形参填入,判断i是否为偶数</span></span><br><span class="line">      <span class="built_in">print</span>(i);                  <span class="comment">//如果是偶数,打印i,否则跳过</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bNum(<span class="number">10</span>);                         <span class="comment">//bNum(10)实参为10,则for循环中的n就是10 输出: 2 4 6 8 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h3><ul><li><p>匿名方法就是没有方法名称的方法</p></li><li><p>匿名方法的传参使用和一般方法一样</p><p>例1:匿名方法定义方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printNum=()&#123;        <span class="comment">//这是一个匿名方法被赋值给了printNum</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>);</span><br><span class="line">&#125;;</span><br><span class="line">printNum();             <span class="comment">//调用printNum方法可以 输出: 123</span></span><br></pre></td></tr></table></figure><p>例2:匿名方法的传参</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printNum=(<span class="built_in">int</span> n)&#123;</span><br><span class="line">    <span class="built_in">print</span>(n*<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">printNum(<span class="number">5</span>);             <span class="comment">//输出: 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自执行方法"><a href="#自执行方法" class="headerlink" title="自执行方法"></a>自执行方法</h3><ul><li><p>自执行方法<strong>((){})()</strong>:指不需要调用也会自动执行的方法</p></li><li><p>自执行方法也可以传入参数</p><p>例1:自执行方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'这是一个自执行方法'</span>);</span><br><span class="line">&#125;)();                     <span class="comment">//输出: 这是一个自执行方法</span></span><br></pre></td></tr></table></figure><p>例2:给自执行方法传入参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((<span class="built_in">int</span> n)&#123;</span><br><span class="line">  <span class="built_in">print</span>(n);</span><br><span class="line">&#125;)(<span class="number">12</span>);                   <span class="comment">//输出: 12</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h3><ul><li><p>递归其实是方法自己调用自己</p></li><li><p>在递归中遇到return停止执行</p><p>例1:使用递归达成1~5的阶乘  1*2 * 3 *4 *5</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">1</span>;</span><br><span class="line">fn(n)&#123;        </span><br><span class="line">  sum*=n;               <span class="comment">//sum=sum*n</span></span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;             <span class="comment">//如果n=1则停止执行</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fn(n<span class="number">-1</span>);              <span class="comment">//否则n-1继续执行</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">5</span>);                  <span class="comment">//fn传入参数5</span></span><br><span class="line"><span class="built_in">print</span>(sum);             <span class="comment">//输出: 120</span></span><br></pre></td></tr></table></figure><p>例2:求1~100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">fn(n)&#123;</span><br><span class="line">  sum+=n;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fn(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(sum);             <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><ul><li><p><strong>全局变量</strong>: 全局变量<strong>作用域大</strong>,<strong>常驻内存</strong>,<strong>污染全局</strong></p><p>例:全局变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;              <span class="comment">//全局变量,全局作用域</span></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(a);           <span class="comment">//输出: 1</span></span><br><span class="line">  fn()&#123;               <span class="comment">//自定义方法fn</span></span><br><span class="line">    a++;              <span class="comment">//方法体是a++然后打印出a</span></span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();               <span class="comment">//因a全局作用域,所以常驻内存污染全局因此a=1的情况下a++=2 输出: 2</span></span><br><span class="line">  fn();               <span class="comment">//因a全局作用域,所以常驻内存污染全局因此a=2的情况下a++=3 输出: 3</span></span><br><span class="line">&#125;                     <span class="comment">//如果继续调用fn,那么会持续向下加</span></span><br></pre></td></tr></table></figure></li><li><p><strong>局部变量</strong>: <strong>作用域小</strong>,<strong>不会常驻内存</strong>,<strong>会被垃圾回收机制回收</strong>,<strong>不会污染全局</strong></p><p>例:局部变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">printInfo()&#123;           <span class="comment">//自定义方法</span></span><br><span class="line">  <span class="keyword">var</span> myNum=<span class="number">1</span>;         <span class="comment">//自定义方法中的局部变量</span></span><br><span class="line">  myNum++;             <span class="comment">//自增</span></span><br><span class="line">  <span class="built_in">print</span>(myNum);        <span class="comment">//调用方法时打印出自增后的myNum</span></span><br><span class="line">&#125;</span><br><span class="line">printInfo();           <span class="comment">//调用该方法,自增后值为2 输出: 2</span></span><br><span class="line">printInfo();           <span class="comment">//因为是局部变量,没有常驻内存,每次的值都会被垃圾回收机制回收,所以值依旧是1自增为2 输出: 2</span></span><br><span class="line"><span class="built_in">print</span>(myNum);          <span class="comment">//因为是局部变量,作用域小,所以在自定义方法外调用自定义方法中的属性是无法调用的 错误写法X</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h4><ul><li><p><strong>闭包</strong>是一种在全局变量和局部变量之间<strong>取舍</strong>的写法,闭包<strong>常驻内存</strong>并且<strong>不会污染全局</strong></p></li><li><p>闭包:函数嵌套函数,内部函数会调用外部函数的变量或参数,不会被系统回收</p></li><li><p>闭包写法:函数嵌套函数并return里面的函数</p><p>例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">fn()&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span>()&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=fn();</span><br><span class="line">b();                <span class="comment">//输出: 2</span></span><br><span class="line">b();                <span class="comment">//输出: 3</span></span><br><span class="line">b();                <span class="comment">//输出: 4 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;函数 , 自定义方法 , 方法的传参 , 可选参数和命名参数 , 给方法传入方法 , 箭头函数 , 函数的相互调用 , 匿名方法 , 自执行方法 , 方法的递归 , 全局变量和局部变量 , 闭包&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (四)</title>
    <link href="http://yoursite.com/2020/03/29/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>http://yoursite.com/2020/03/29/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/</id>
    <published>2020-03-29T08:00:31.000Z</published>
    <updated>2020-04-02T13:41:43.631Z</updated>
    
    <content type="html"><![CDATA[<p><strong>List常用属性和方法 , Set</strong> , <strong>Map(字典,映射)的常用方法和属性 , 常用循环遍历方法 , 使用循环语句修改list内容where , any , map , every</strong></p><a id="more"></a><h3 id="List常用属性和方法"><a href="#List常用属性和方法" class="headerlink" title="List常用属性和方法"></a>List常用属性和方法</h3><ul><li><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li><strong>length</strong>(长度) , <strong>reversed</strong>(反转) , <strong>isEmpty</strong>(为空) , <strong>isNotEmpty</strong>(不为空)</li></ul></li><li><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>add</strong>(增加) , <strong>addAll</strong>(拼接数组) , <strong>indexOf</strong>(查找,传入具体值) , <strong>remove</strong>(删除,传入具体值) , <strong>removeAt</strong>(删除,传入索引值) , <strong>fillRange</strong>(修改) ,  <strong>insert(index,value)</strong>(指定位置插入) , <strong>toList()</strong>(其他类型转换为List)     , <strong>insertAll(index,list)</strong>(指定位置插入List) , <strong>Join()</strong>(List转换为字符串) , <strong>split()</strong>(字符串转换为List)  ,   <strong>forEach   ,  map   ,  where   ,  any    ,  every</strong></li></ul><p>例1:常用属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line"><span class="built_in">print</span>(myList.length);                    <span class="comment">//输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(myList.isEmpty);                   <span class="comment">//输出: false</span></span><br><span class="line"><span class="built_in">print</span>(myList.isNotEmpty);                <span class="comment">//输出: true</span></span><br><span class="line"><span class="built_in">print</span>(myList.reversed);                  <span class="comment">//输出: (小,中,大) 经过反转后并不是list类型</span></span><br><span class="line"><span class="keyword">var</span> newList=myList.reversed.toList();</span><br><span class="line"><span class="built_in">print</span>(newList);                          <span class="comment">//输出: [小,中,大] 使用toList转换为list类型</span></span><br></pre></td></tr></table></figure><p>例2:常用方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">add</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">  myList.add(<span class="string">'特大'</span>);                    <span class="comment">//add方法增加数组内容,但一次只能添加一个</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                       <span class="comment">//输出: [大, 中, 小, 特大]</span></span><br><span class="line">addAll</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">    myList.addAll([<span class="string">'特大'</span>,<span class="string">'特特大'</span>]);    <span class="comment">//addAll可以看做是数组拼接,吧括号中的数组和原数组进行拼接</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//输出: [大, 中, 小, 特大,特特大]</span></span><br><span class="line">indexOf</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">    <span class="keyword">var</span> a=myList.indexOf(<span class="string">'小'</span>);         <span class="comment">//传入想要查询的具体内容,如果该数组中有则返回索引值,没有的话返回-1</span></span><br><span class="line">    <span class="built_in">print</span>(a);                           <span class="comment">//输出: 2   这是小在数组中的索引值</span></span><br><span class="line">remove</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];       </span><br><span class="line">    myList.remove(<span class="string">'小'</span>);                <span class="comment">//传入想要删除的具体内容</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//小被删除了所以输出: [大,中]</span></span><br><span class="line">removeAt</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];       </span><br><span class="line">    myList.removeAt(<span class="number">2</span>);                 <span class="comment">//传入想要删除的索引值,小的索引值是012里的2</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//小被删除了所以输出: [大,中]</span></span><br><span class="line">fillRange</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];        </span><br><span class="line">    myList.fillRange(<span class="number">2</span>,<span class="number">3</span>,<span class="string">'超小'</span>);       <span class="comment">//传入起始位置和结束位置的索引值,然后传入要修改的内容,索引值位置模板[0'大'1'中'2'小'3]  (start,end,value)</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//经过修改 输出: [大, 中, 超小]</span></span><br><span class="line">   </span><br><span class="line">    myList.fillRange(<span class="number">1</span>,<span class="number">3</span>,<span class="string">'超小'</span>);       <span class="comment">//也可以一次性修改多项</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//输出: [大,超小,超小]</span></span><br><span class="line">insert</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];    </span><br><span class="line">    myList.insert(<span class="number">3</span>, <span class="string">'超小'</span>);           <span class="comment">//填写要插入的位置 和 要插入的内容[0'大'1'中'2'小'3]</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//输出: [大, 中, 小, 超小] insert只能插入一个内容</span></span><br><span class="line">insertAll</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];   </span><br><span class="line">    myList.insertAll(<span class="number">1</span>, [<span class="string">'特大'</span>,<span class="string">'特小'</span>]);   <span class="comment">//可插入数组(多个内容)</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                         <span class="comment">//输出: [大, 特大, 特小, 中, 小]</span></span><br><span class="line">Join</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">    <span class="keyword">var</span> a=myList.join(<span class="string">' '</span>);              <span class="comment">//Join方法可把数组转换为字符串 ('引号')中传入如何间隔 </span></span><br><span class="line">    <span class="keyword">var</span> b=myList.join(<span class="string">'-'</span>);              <span class="comment">//可以传入空格也可以使用,- 等等</span></span><br><span class="line">    <span class="built_in">print</span>(a);                            <span class="comment">//输出: 大 中 小</span></span><br><span class="line">    <span class="built_in">print</span>(b);                            <span class="comment">//输出: 大-中-小</span></span><br><span class="line">split</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">'苹果-香蕉-桃子'</span>;              <span class="comment">//字符串 如果是str='苹果,香蕉,桃子'则split传入','</span></span><br><span class="line">    <span class="keyword">var</span> list=str.split(<span class="string">'-'</span>);              <span class="comment">//用split方法 以-为分隔符来切割内容组成数组</span></span><br><span class="line">    <span class="built_in">print</span>(list);                          <span class="comment">//输出: [苹果, 香蕉, 桃子]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li><p>用它的主要功能就是去除数组重复内容</p></li><li><p>Set是没有顺序且不能重复的集合,所以不能通过索引去获取值</p><p>例: Set的使用方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span> a=&#123;<span class="string">'aaa'</span>,<span class="string">'bbb'</span>,<span class="string">'aaa'</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(a);                   <span class="comment">//输出: &#123;aaa, bbb&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">'张三'</span>);</span><br><span class="line">s.add(<span class="string">'李四'</span>);</span><br><span class="line">s.add(<span class="string">'李四'</span>);</span><br><span class="line"><span class="built_in">print</span>(s);                   <span class="comment">//输出: &#123;张三, 李四&#125;           </span></span><br><span class="line"><span class="built_in">print</span>(s.toList());          <span class="comment">//输出: [张三, 李四]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l=<span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">l.add(<span class="string">'张三'</span>);</span><br><span class="line">l.add(<span class="string">'李四'</span>);</span><br><span class="line">l.add(<span class="string">'李四'</span>);</span><br><span class="line"><span class="built_in">print</span>(l);                   <span class="comment">//输出: [张三, 李四, 李四]</span></span><br><span class="line"><span class="built_in">print</span>(l.toSet());           <span class="comment">//输出: &#123;张三, 李四&#125;</span></span><br><span class="line"><span class="built_in">print</span>(l.toSet().toList());  <span class="comment">//输出: [张三, 李四]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> list=[<span class="string">'苹果'</span>,<span class="string">'香蕉'</span>,<span class="string">'西瓜'</span>,<span class="string">'西瓜'</span>,<span class="string">'香蕉'</span>,<span class="string">'西瓜'</span>];</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.addAll(list);             <span class="comment">//必须使用addAll,不然会被看做为一个整体数组</span></span><br><span class="line"><span class="built_in">print</span>(s);                   <span class="comment">//输出: &#123;苹果, 香蕉, 西瓜&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s.toList());          <span class="comment">//输出: [苹果, 香蕉, 西瓜]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Map-字典-映射-的常用方法和属性"><a href="#Map-字典-映射-的常用方法和属性" class="headerlink" title="Map(字典,映射)的常用方法和属性"></a>Map(字典,映射)的常用方法和属性</h3><ul><li><h4 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li><strong>keys</strong>(获取所有key值)    ,    <strong>values</strong>(获取所有value值)   ,     <strong>isEmpty</strong>(是否为空)   ,     <strong>isNotEmpty</strong>(是否不为空)     </li></ul></li><li><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>remove</strong>(key) :                       删除指定key的数据</li><li><strong>addAll</strong>({…}) :                         合并映射,给映射内增加属性</li><li><strong>containsValue(value)</strong> :    查看映射内的值,返回true/false</li><li><strong>map  ,  forEach   ,  where   ,   any ,    every</strong></li></ul><p>例1:常用属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span> person=&#123;</span><br><span class="line">  <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">  <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">  <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(person);                        <span class="comment">//输出: &#123;name: 老念, age: 25, sex: 男&#125;</span></span><br><span class="line"><span class="built_in">print</span>(person.keys);                   <span class="comment">//输出: (name, age, sex)</span></span><br><span class="line"><span class="built_in">print</span>(person.keys.toList());          <span class="comment">//输出: [name, age, sex]</span></span><br><span class="line"><span class="built_in">print</span>(person.values.toList());        <span class="comment">//输出: [老念, 25, 男]</span></span><br><span class="line"><span class="built_in">print</span>(person.isEmpty);                <span class="comment">//输出: false</span></span><br><span class="line"><span class="built_in">print</span>(person.isNotEmpty);             <span class="comment">//输出: true</span></span><br></pre></td></tr></table></figure><p>例2:常用方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">remove(key)</span><br><span class="line">    <span class="built_in">Map</span> person=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">    <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    person.remove(<span class="string">'sex'</span>);</span><br><span class="line">    <span class="built_in">print</span>(person);                          <span class="comment">//输出: &#123;name: 老念, age: 25&#125;</span></span><br><span class="line">addAll</span><br><span class="line">    <span class="built_in">Map</span> person=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">    <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    person.addAll(&#123;<span class="string">'work'</span>:[<span class="string">'送外卖'</span>,<span class="string">'敲代码'</span>],<span class="string">'height'</span>:<span class="number">165</span>&#125;);</span><br><span class="line">    <span class="built_in">print</span>(person);                          <span class="comment">//输出: &#123;name: 老念, age: 25, sex: 男, work: [送外卖, 敲代码], height: 165&#125;</span></span><br><span class="line">containsValue</span><br><span class="line">    <span class="built_in">Map</span> person=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">    <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">print</span>(person.containsValue(<span class="string">'老念'</span>));     <span class="comment">//输出: true   containsKey(key)使用方法相同</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用循环语句循环遍历"><a href="#常用循环语句循环遍历" class="headerlink" title="常用循环语句循环遍历"></a>常用循环语句循环遍历</h3><ul><li><p>使用循环语句循环遍历打印所有内容有许多方法常用如下</p><ul><li><strong>for循环</strong>  ,    <strong>for…in</strong>    ,    <strong>forEach</strong>              </li></ul></li><li><p>例1:使用for循环循环遍历</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'老念'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">  <span class="built_in">print</span>(list[i]);</span><br><span class="line">&#125;                                          <span class="comment">//输出: 张三  李四   王五   老念</span></span><br></pre></td></tr></table></figure></li><li><p>例2:使用for…in循环遍历</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'老念'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> itme <span class="keyword">in</span> list)&#123;</span><br><span class="line">  <span class="built_in">print</span>(itme);</span><br><span class="line">&#125;                                          <span class="comment">//输出: 张三  李四   王五   老念</span></span><br></pre></td></tr></table></figure></li><li><p>例3:使用forEach循环遍历</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'老念'</span>];</span><br><span class="line">list.forEach((value)&#123;                      <span class="comment">//forEach((key,value)&#123;&#125;)因为list只有一个内容所以只填写一个</span></span><br><span class="line">  <span class="built_in">print</span>(value);</span><br><span class="line">&#125;);                                        <span class="comment">//输出: 张三  李四   王五   老念</span></span><br></pre></td></tr></table></figure><h4 id="使用循环语句修改list内容"><a href="#使用循环语句修改list内容" class="headerlink" title="使用循环语句修改list内容"></a>使用循环语句修改list内容</h4></li><li><p><strong>map   ,    where  ,    any    ,  every</strong></p><ul><li>map:循环遍历修改数据</li><li>where:条件判断,满足条件的返回为一个新的集合</li><li>any:条件判断有满足条件的则返回true,没有则返回false</li><li>every:条件判断,所有数据都满足条件则返回true,有一个没有满足条件就返回false</li></ul></li><li><p>例1:使用for循环修改内容,给list每个数据X2并返回一个新的数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newList=<span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myList.length;i++)&#123;</span><br><span class="line">  newList.add(myList[i]*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(newList);                           <span class="comment">//输出: [2, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><p>例2:使用map方法修改内容,给list每个数据X2并返回一个新的数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];                      </span><br><span class="line"><span class="keyword">var</span> newList=myList.map((value)&#123;           <span class="comment">//虽然forEach也可以做到但是据说很可能会出问题所以一般用map方法</span></span><br><span class="line">  <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newList);                           <span class="comment">//输出: (2, 6, 8, 10)                </span></span><br><span class="line"><span class="built_in">print</span>(newList.toList());                  <span class="comment">//输出: [2, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><p>例3:使用where,将满足条件的数据组成一个新的数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newList=myList.where((value)&#123;</span><br><span class="line">  <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newList.toList());                  <span class="comment">//输出: [4,5]</span></span><br></pre></td></tr></table></figure></li><li><p>例4:使用any判断该数组是否有大于3的数据</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> f=myList.any((value)&#123;</span><br><span class="line">  <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(f);                                  <span class="comment">//输出: true</span></span><br></pre></td></tr></table></figure></li><li><p>例5:使用every判断该数组是否<strong>所有</strong>数据都大于3</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> f=myList.every((value)&#123;</span><br><span class="line">  <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(f);                                  <span class="comment">//输出: false</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;List常用属性和方法 , Set&lt;/strong&gt; , &lt;strong&gt;Map(字典,映射)的常用方法和属性 , 常用循环遍历方法 , 使用循环语句修改list内容where , any , map , every&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (三)</title>
    <link href="http://yoursite.com/2020/03/27/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://yoursite.com/2020/03/27/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/</id>
    <published>2020-03-27T11:05:23.000Z</published>
    <updated>2020-04-02T13:34:31.653Z</updated>
    
    <content type="html"><![CDATA[<p><strong>String和Num的类型转换 , ++–自增自减 , for循环基础语法 , 二维List和Map和二维for循环 , 循环语句while和do…while , break语句和continue语句的功能</strong> </p><a id="more"></a><h3 id="Number和String类型之间的转换"><a href="#Number和String类型之间的转换" class="headerlink" title="Number和String类型之间的转换"></a>Number和String类型之间的转换</h3><ul><li><p>Number类型转换为String类型使用  toString()方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">12</span>;               <span class="comment">//定义a=12 数值类型</span></span><br><span class="line"><span class="keyword">var</span> str=a.toString();   <span class="comment">//使用toString方法</span></span><br><span class="line"><span class="built_in">print</span>(str <span class="keyword">is</span> <span class="built_in">String</span>);   <span class="comment">//用is判断str是不是String类型 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p>String类型转换为Number类型使用  parse()方法</p><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str=<span class="string">'123'</span>;           <span class="comment">// '123'是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="built_in">double</span>.parse(str);    <span class="comment">//parse的使用方式   double int 都可以使用</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="built_in">double</span>);         <span class="comment">//输出: true</span></span><br></pre></td></tr></table></figure><ul><li><p>如果String转Namber时,因str=’  ‘空而报错,可食用try….catch 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> price=<span class="string">' '</span>;                <span class="comment">//可能是空格 空 其他非数字内容  price(价格)</span></span><br><span class="line"><span class="keyword">try</span>&#123;                             <span class="comment">//如果有数据就执行转换,错误数据就执行catch </span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="built_in">double</span>.parse(price);</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="built_in">print</span>(a <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>);                     <span class="comment">//输出: 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以使用if..else和isEmpty(为空)或者NotisEmpty(不为空)方法 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(price.isEmpty)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="keyword">if</span>(price.NotisEmpty)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><ul><li><p>++(自增) , –(自减)</p></li><li><p>在赋值运算中,如果++–写在前面,这时会先运算,再赋值.如果++–写在后面则先赋值,后运算</p><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;   </span><br><span class="line"><span class="keyword">var</span> b=a++;   <span class="comment">//++写在后面所以是先赋值再运算  </span></span><br><span class="line"><span class="built_in">print</span>(a);    <span class="comment">//后运算 输出: 11</span></span><br><span class="line"><span class="built_in">print</span>(b);    <span class="comment">//先赋值 输出: 10</span></span><br></pre></td></tr></table></figure><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;   </span><br><span class="line"><span class="keyword">var</span> b=--a;   <span class="comment">//--写在前面所以是先运算再赋值</span></span><br><span class="line"><span class="built_in">print</span>(a);    <span class="comment">//先运算 输出: 9</span></span><br><span class="line"><span class="built_in">print</span>(b);    <span class="comment">//后赋值 输出: 9</span></span><br></pre></td></tr></table></figure></li><li><p>不是赋值运算的情况下++ , –写在前面后面效果一样</p></li></ul><h3 id="For循环的基本语法"><a href="#For循环的基本语法" class="headerlink" title="For循环的基本语法"></a>For循环的基本语法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;       <span class="comment">//1.声明变量int i=1; 2.判断i&lt;=100; 3.print(i); 4.i++; 5.从第二步继续开始循环,直到判断为false.</span></span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">&#125;                              <span class="comment">//输出: 123456~~~直到100;   因为100之后i++ 101 第二步判断为false 所以跳出循环</span></span><br></pre></td></tr></table></figure><ul><li><p>例1:打印出0-50的偶数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;=<span class="number">50</span>;a++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">0</span>)&#123;             <span class="comment">//在for循环中嵌套if判断语句,判断条件为a取整2==0则输出a,否则 就是 不是偶数的 跳过</span></span><br><span class="line">        <span class="built_in">print</span>(a);</span><br><span class="line">    &#125;                       <span class="comment">//所以没写else</span></span><br><span class="line">&#125;                           <span class="comment">//输出: 0 2 4 6....50;</span></span><br></pre></td></tr></table></figure></li><li><p>例2:求1+2+3….+100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">0</span>;                    <span class="comment">//从1开始加所以b=0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">0</span>;a&lt;=<span class="number">100</span>;a++)&#123;</span><br><span class="line">    b+=a;                   <span class="comment">//b=b+a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(b);                   <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure></li><li><p>例3:求5的阶乘</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;                    <span class="comment">//0x1=0所以b=1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">    b*=a;                   <span class="comment">//b=b*a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(b);                   <span class="comment">//输出: 120</span></span><br></pre></td></tr></table></figure></li><li><p>例4:打印List数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> a=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>];         <span class="comment">//定义数组a</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> b=<span class="number">0</span>;b&lt;a.length;b++)&#123;          <span class="comment">//a.length是使用了length属性 是指list的长度 a数组长度为3但编号是从0开始所以是0 1 2,所以用b&lt;a.length 因为没有编号3</span></span><br><span class="line">    <span class="built_in">print</span>(a[b]);                      <span class="comment">//输出: 张三 李四 王五</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例5:打印数组中的Map树形</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> a=[&#123;<span class="string">'name'</span>:<span class="string">'熊大'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'熊二'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'熊三'</span>&#125;];      <span class="comment">//定义数组a中有三个map</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> b=<span class="number">0</span>;b&lt;a.length;b++)&#123;                                  <span class="comment">//for循环打印出数组中每个map中的name的value</span></span><br><span class="line">    <span class="built_in">print</span>(a[b][<span class="string">'name'</span>]);                                      <span class="comment">//输出: 熊大 熊二 熊三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="二维List和Map和二维for循环"><a href="#二维List和Map和二维for循环" class="headerlink" title="二维List和Map和二维for循环"></a>二维List和Map和二维for循环</h4><p>例6:用二维for循环打印list中嵌套的map中的list</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">List</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'目录'</span>: <span class="string">'游戏'</span>,</span><br><span class="line">      <span class="string">'内容'</span>: [</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Steam'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Origin'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Uplay'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'目录'</span>: <span class="string">'工作'</span>,</span><br><span class="line">      <span class="string">'内容'</span>: [</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Java'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Dart'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> a = <span class="number">0</span>; a &lt; list.length; a++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'----------------------------------------'</span>);</span><br><span class="line">    <span class="built_in">print</span>(list[a][<span class="string">'目录'</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> b = <span class="number">0</span>; b &lt; list[a][<span class="string">'内容'</span>].length; b++) &#123;</span><br><span class="line">      <span class="built_in">print</span>(list[a][<span class="string">'内容'</span>][b][<span class="string">'名称'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line">----------------------------------------</span><br><span class="line">游戏</span><br><span class="line">Steam</span><br><span class="line">Origin</span><br><span class="line">Uplay</span><br><span class="line">----------------------------------------</span><br><span class="line">工作</span><br><span class="line">Java</span><br><span class="line">Dart</span><br><span class="line">Python</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环语句while和do…while"><a href="#循环语句while和do…while" class="headerlink" title="循环语句while和do…while"></a>循环语句while和do…while</h3><ul><li><p>while和do…while之间的区别: while在第一次循环条件不成立的情况下,什么都不会打印;do…while因为会先执行一次再判断,所以会打印第一次 例如:</p><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;<span class="number">2</span>)&#123;                 <span class="comment">//a大于2 所以不执行内容  输出应为'空'</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'你好'</span>);</span><br><span class="line">&#125;                           <span class="comment">//输出: '空'</span></span><br></pre></td></tr></table></figure></li><li><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'你好'</span>);            <span class="comment">//do..while的情况下会先执行此 打印出你好</span></span><br><span class="line">&#125;<span class="keyword">while</span>(a&lt;<span class="number">2</span>);                  <span class="comment">//然后判断 a大于2 停止循环 但第一遍已经输出: 你好</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意</strong>:1.do..while最后需要填分号 2.循环条件中使用的变量需要经过初始化 3.循环体中应有<strong>结束循环</strong>的条件,不然就成了死循环 例如:</p><p>例1: while打印1~10</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    a++;</span><br><span class="line">&#125;              <span class="comment">//输出: 1234...10</span></span><br></pre></td></tr></table></figure><p>例2:while求1~100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    b+=a;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(b);      <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure><p>例3:do…while求1~100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    b+=a;</span><br><span class="line">    a++;</span><br><span class="line">&#125;<span class="keyword">while</span>(a&lt;=<span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(b);     <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure><p>例4:死循环 错误写法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;             <span class="comment">//死循环,会不停输出111111因为没有满足结束条件</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="break语句和continue语句的功能"><a href="#break语句和continue语句的功能" class="headerlink" title="break语句和continue语句的功能"></a>break语句和continue语句的功能</h3><ul><li><h4 id="break语句功能-在switch中跳出switch结构"><a href="#break语句功能-在switch中跳出switch结构" class="headerlink" title="break语句功能:在switch中跳出switch结构"></a>break语句功能:在switch中跳出switch结构</h4><ul><li><p>在循环语句中使流程跳出当前循环,遇到break循环终止,后面的代码也不会执行</p></li><li><p>如果循环中已经执行了break语句,就不会执行循环体中break之后的语句</p></li><li><p>多层循环中,一个break语句只能向外跳出一层</p></li><li><p>break可以用在switch…case中,也可以用在for循环和while循环中</p></li></ul></li><li><h4 id="continue语句功能-跳过当前循环"><a href="#continue语句功能-跳过当前循环" class="headerlink" title="continue语句功能:跳过当前循环"></a>continue语句功能:跳过当前循环</h4><ul><li><p>使本次循环结束,即跳过循环体中下面尚未执行的语句,接着进行下一次循环</p></li><li><p>continue只能在循环语句中使用,可以在for循环以及while循环中使用,但不建议用在while循环中使用,容易造成死循环</p></li></ul><p>例1:如果a=4,跳过当前循环</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">4</span>)&#123;             <span class="comment">//如果a==4</span></span><br><span class="line">        <span class="keyword">continue</span>;         <span class="comment">//跳出当前循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);             <span class="comment">//输出: 1235</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2:如果a=4的话结束循环(跳出循环)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">4</span>)&#123;   </span><br><span class="line">        <span class="keyword">break</span>;              <span class="comment">//结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);               <span class="comment">//输出: 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例3:在多层循环中向外跳出一层</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'外层'</span>);              <span class="comment">//输出一个外层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> b=<span class="number">1</span>;b&lt;=<span class="number">3</span>;b++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;             <span class="comment">//当b=2的时候就跳出当前循环 但是外部循环仍在继续</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'内层'</span>);          <span class="comment">//因为内层到2就跳出,所以只有1会打印一次内层</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: </span></span><br><span class="line"><span class="comment">//     外层</span></span><br><span class="line"><span class="comment">//     内层</span></span><br><span class="line"><span class="comment">//     外层</span></span><br><span class="line"><span class="comment">//     内层</span></span><br><span class="line"><span class="comment">//     外层</span></span><br><span class="line"><span class="comment">//     内层</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;String和Num的类型转换 , ++–自增自减 , for循环基础语法 , 二维List和Map和二维for循环 , 循环语句while和do…while , break语句和continue语句的功能&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (二)</title>
    <link href="http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2020-03-24T12:50:23.000Z</published>
    <updated>2020-04-02T13:28:31.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数组 , 字典 , 算术运算符 , 关系运算符 , 逻辑运算符 , 条件表达式 , 三目运算</strong></p><a id="more"></a><h3 id="List定义数组的两种方式"><a href="#List定义数组的两种方式" class="headerlink" title="List定义数组的两种方式"></a>List定义数组的两种方式</h3><ul><li><p>&lt; &gt;指限制数组内容为指定类型</p></li><li><p>数组内容编号从0开始,如: 例1中111为0,abc为1,333为2</p></li><li><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">111</span>,<span class="string">'abc'</span>,<span class="number">333</span>];        <span class="comment">//第一种定义数组的方式</span></span><br><span class="line"><span class="built_in">print</span>(a);                     <span class="comment">//输出[111 abc 333]</span></span><br><span class="line"><span class="built_in">print</span>(a.length);              <span class="comment">//指数组的内容长度,有三个内容所以 输出:3</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>]);                  <span class="comment">//指输出数组a中的0号内容  输出: 111</span></span><br></pre></td></tr></table></figure></li><li><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();     <span class="comment">//第二种定义数组的方式 &lt; &gt;表示限定内容为String字符串内容</span></span><br><span class="line">b.add(<span class="string">'张三'</span>);                <span class="comment">//第二种方法需要用.add方法或者.addall方法给数组添加内容</span></span><br><span class="line">b.add(<span class="number">123</span>);                   <span class="comment">//数组b限制内容为字符串类型 123因为没有带引号所以是数值内容 所以是错误的 X</span></span><br><span class="line">b.add(<span class="string">'李四'</span>);   </span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">1</span>]);                  <span class="comment">//输出数组b的1的内容 因为b.add(123);是错误的内容 需要删除掉 所以1为李四 输出:李四</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Map定义集合的两种方式"><a href="#Map定义集合的两种方式" class="headerlink" title="Map定义集合的两种方式"></a>Map定义集合的两种方式</h3><ul><li><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;   </span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'张三'</span>,       <span class="comment">//定义key'name'的value(内容)为张三</span></span><br><span class="line">    <span class="string">'age'</span>:<span class="number">20</span>             <span class="comment">//定义key'age'的value(内容)为20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(person);           <span class="comment">//输出:&#123;name:张三,age:20&#125;</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">'name'</span>]);   <span class="comment">//输出name的value: 张三</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">'age'</span>]);    <span class="comment">//输出age的value: 20</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">'张三'</span>]);   <span class="comment">//不能使用value来输出key 所以是错误的 X</span></span><br></pre></td></tr></table></figure></li><li><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">p[<span class="string">'name'</span>]=<span class="string">'李四'</span>;                 <span class="comment">//name为key 李四为value  </span></span><br><span class="line">p[<span class="string">'age'</span>]=<span class="number">20</span>;   </span><br><span class="line">p[<span class="string">'work'</span>]=[<span class="string">'送外卖'</span>,<span class="string">'程序员'</span>];     <span class="comment">//同时可在map中掺杂list数组 即work的value可以是一个数组</span></span><br><span class="line"><span class="built_in">print</span>(p);                        <span class="comment">//输出: &#123;name:李四,age:20,work:[送外卖,程序员]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(p[<span class="string">'work'</span>]);                <span class="comment">//单独打印map p中的work的value 输出数组: [送外卖,程序员]</span></span><br><span class="line"><span class="built_in">print</span>(p[<span class="string">'work'</span>][<span class="number">0</span>]);             <span class="comment">//也可以只打印key work的数组value中的0 输出: 送外卖</span></span><br></pre></td></tr></table></figure><h4 id="is判断语句"><a href="#is判断语句" class="headerlink" title="is判断语句"></a>is判断语句</h4><ul><li><p>通过 ‘ is ‘ 关键词判断类型: 当你不知道服务器返回的数据是什么类型可以通过is关键词判断数据类型 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'123'</span>;                      <span class="comment">//定义str为 字符串类型内容是123</span></span><br><span class="line"><span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">String</span>)&#123;                  <span class="comment">//如果str is String</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'str是String类型'</span>);        <span class="comment">//就打印输出</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">int</span>)&#123;               <span class="comment">//否则 如果 str is int</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'str是int类型'</span>);           <span class="comment">//就打印输出</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;                              <span class="comment">//否则</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'其他类型'</span>);               <span class="comment">//打印输出</span></span><br><span class="line">&#125;                                   <span class="comment">//因为是字符串类型所以 输出: str是String类型关系运算符</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><p>关系运算符有:</p><p>==(等于) , !=(不等于) , &gt;(大于) , &lt;(小于) , &gt;=(大于等于) , &lt;=(小于等于)     </p></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>逻辑运算符有:</p><p>!(取反) , &amp;&amp;(并且) , ||(或者)</p></li><li><p>或者||: 全部为false的话值为false,否则值为true</p></li><li><p>并且&amp;&amp;: 全部为true的话值为true,否则值为false</p></li></ul><h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><ul><li><p>赋值运算有:</p><p>=  , ??= ,   ??</p></li><li><p>??= :表示如果b为空的话吧23赋值给b</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:                                           例<span class="number">2</span>:</span><br><span class="line"><span class="built_in">int</span> b;   <span class="comment">//定义一个int类型的b 没有赋值            int b=3;   //定义一个int类型b 赋值3   </span></span><br><span class="line">b??=<span class="number">23</span>;  <span class="comment">//b??=23                               b??=23;    //b??=23</span></span><br><span class="line"><span class="built_in">print</span>(b);<span class="comment">//因为b没有赋值所以输出: 23              print(b);   //因为b有赋值3 所以输出: 3</span></span><br></pre></td></tr></table></figure></li><li><p>??: 表示如果 a??10  a为空,则吧10赋予a,如果a自有数值则不赋予,例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;          <span class="comment">//定义一个a 内容为空</span></span><br><span class="line"><span class="keyword">var</span> b=a??<span class="number">10</span>;    <span class="comment">//b=a??10 从右往左看先看a??10,因为a为空所以吧10赋予a  然后在看b=a  所以b=10</span></span><br><span class="line"><span class="built_in">print</span>(b);       <span class="comment">//输出: 10</span></span><br></pre></td></tr></table></figure><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">22</span>;      <span class="comment">//赋值a=22</span></span><br><span class="line"><span class="keyword">var</span> b=a??<span class="number">10</span>;   <span class="comment">//因为a有内容所以并不会吧10赋予a所以a=22 所以b=a的时候b=22</span></span><br><span class="line"><span class="built_in">print</span>(b);      <span class="comment">//输出: 22</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="复合赋值运算"><a href="#复合赋值运算" class="headerlink" title="复合赋值运算"></a>复合赋值运算</h3><ul><li><p>+= , -= ,  *= , /= , %=(取余) , ~/=(取整)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a+=<span class="number">10</span>  <span class="comment">//表示a=a+10;</span></span><br><span class="line">a*=<span class="number">10</span>  <span class="comment">//表示a=a*10;</span></span><br><span class="line">a~/=<span class="number">10</span> <span class="comment">//表示a=a~/10;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><ul><li><p>条件表达式有很多种</p><p>如:’if….else’     ‘switch…..case’</p></li><li><p>switch….case的使用方法如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex=<span class="string">'女'</span>;                 <span class="comment">//switch(开关)   case(具体,事例)</span></span><br><span class="line"><span class="keyword">switch</span>(sex)&#123;                  <span class="comment">//switch sex</span></span><br><span class="line">        <span class="keyword">case</span><span class="string">'男'</span>:             <span class="comment">//case 男</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'他是男的'</span>);     <span class="comment">//打印输出</span></span><br><span class="line">        <span class="keyword">break</span>;                <span class="comment">//结束</span></span><br><span class="line">        <span class="keyword">case</span><span class="string">'女'</span>:             <span class="comment">//case 女</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'她是女的'</span>);     <span class="comment">//打印输出</span></span><br><span class="line">        <span class="keyword">break</span>;                <span class="comment">//结束</span></span><br><span class="line">    <span class="keyword">default</span>:                  <span class="comment">//如果两个case都不对</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'传入数据错误'</span>);  <span class="comment">//打印输出</span></span><br><span class="line">        <span class="keyword">break</span>;                 <span class="comment">//结束</span></span><br><span class="line">&#125;                              <span class="comment">//因为case是女所以输出: 她是女的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><ul><li><p>例1: 如果flag=true,吧’我是true’赋予c</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> flag=<span class="keyword">true</span>;          <span class="comment">//bool类型flag定义为true</span></span><br><span class="line"><span class="keyword">var</span> c;                   <span class="comment">//定义一个C 内容为空</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;   </span><br><span class="line">    c=<span class="string">'我是true'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    c=<span class="string">'我是false'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(c);                <span class="comment">//输出: 我是true</span></span><br></pre></td></tr></table></figure><p>吧正常if else 转换为三目预算来减化为:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">String</span> c=flag?<span class="string">'我是true'</span>:<span class="string">'我是false'</span>;   <span class="comment">//?为if,:为else</span></span><br><span class="line"><span class="built_in">print</span>(c);                              <span class="comment">//输出: 我是true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;数组 , 字典 , 算术运算符 , 关系运算符 , 逻辑运算符 , 条件表达式 , 三目运算&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (一)</title>
    <link href="http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2020-03-24T08:55:58.000Z</published>
    <updated>2020-04-02T13:18:38.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>古今中外有学问的人，有成就的人，总是十分注意积累的。知识就是机积累起来的，经验也是积累起来的。我们对什么事情都不应该像“过眼云烟”</p><p>​                                                                                                                                                                                <strong>邓拓</strong></p></blockquote><p><strong>入口 , 变量 , 常量 , 常用数据类型 , 字符串的拼接 , 布尔类型</strong></p><a id="more"></a><h1 id="Dart语言"><a href="#Dart语言" class="headerlink" title="Dart语言"></a>Dart语言</h1><ul><li>入口方法main</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;              <span class="comment">//没有返回值的入口方法       </span></span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;                  <span class="comment">//入口方法</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>打印方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'你好Hexo'</span>);    <span class="comment">//输出:你好Hexo</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3></li><li><p>变量必须由<u><strong>数字</strong></u>,<strong><u>字母</u></strong>,<strong><u>下划线</u></strong>和<strong><u>美元符</u></strong>号组成  </p></li><li><p>标识符不能由<strong><u>数字</u></strong>开头  如错误示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="number">123</span>str=<span class="number">123</span>;      <span class="comment">//错误示例</span></span><br></pre></td></tr></table></figure></li><li><p>标识符不能是<strong><u>保留字</u></strong> ,<u><strong>关键字</strong></u>  如错误示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">int</span>=<span class="number">123</span>;        <span class="comment">//错误示例</span></span><br></pre></td></tr></table></figure></li><li><p>变量的名字是区分大小写的  如:<strong><u>age</u></strong>和<strong><u>Age</u></strong>应为两个不同的变量。在实际的运用中,也建议不要使用同一个。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">10</span>;         <span class="comment">//这是两个不同的变量</span></span><br><span class="line"><span class="keyword">var</span> Age=<span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>标识符一定要见名思意,变量名称建议用名词,方法名称用动词。</p></li><li><p><strong><u>Var</u></strong>会自动判断变量类型,不能和<strong><u>String</u></strong>   <strong><u>int</u></strong>一起使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字类型不用带'引号',字符串类型须带上'引号',"双引号"和'单引号'效果一样,Dart有类型效验。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">'你好'</span>;   </span><br><span class="line"><span class="built_in">print</span>(str);        <span class="comment">//自动变量 打印出:你好</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">num</span>=<span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span>);        <span class="comment">//自动变量 打印出:123</span></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="built_in">String</span> str=<span class="string">'你好'</span>;</span><br><span class="line"><span class="built_in">print</span>(str);        <span class="comment">//字符串类型 打印出:你好</span></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">num</span>=<span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span>);        <span class="comment">//数字类型 打印出:123</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li><p>常量是不改变的量</p></li><li><p>变量可以修改,常量不可以修改</p></li><li><p><strong><u>const</u></strong>和<strong><u>final</u></strong>都是常量,但final更强大,const值不变一开始就要赋值;final可以开始不赋值,只能赋值一次,而且final不仅有const的<strong><u>编译时常量</u></strong>的特性,最重要的是它是<strong><u>运行时常量</u></strong>,<strong>惰性初始化</strong>,即在运行时第一次使用前才初始化 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="number">3.1415926</span>;            <span class="comment">//编译时常量</span></span><br><span class="line"><span class="built_in">print</span>(a);                     <span class="comment">//打印出:3.1415926</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> a=<span class="keyword">new</span> <span class="built_in">DateTime</span>.now();   <span class="comment">//运行时常量</span></span><br><span class="line"><span class="built_in">print</span>(a);                     <span class="comment">//打印出:2019.9.17. 14:37:54:722292</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ul><li><p><strong>Number</strong>(数值):</p><p>int:整数 整型 , double:小数  浮点型</p></li><li><p><strong>String</strong>(字符串):</p><p>String:字符串</p></li><li><p><strong>Booleans</strong>(布尔):</p><p>bool:<strong>true</strong>对 , <strong>false</strong>错</p></li><li><p><strong>List</strong>(数组):</p><p>list:数组,在Dart中,数组是列表对象,所以大多数人称为列表</p></li><li><p><strong>Map</strong>(字典):</p><p>map:字典</p></li><li><p>运算符中一旦有用double的数据,结果也会变成浮点型  如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">double</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">print</span>(a+b);   <span class="comment">//输出:3.0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><ul><li><p>三对’’’引号’’’可写多层代码  如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str=<span class="string">'''123</span></span><br><span class="line"><span class="string">456</span></span><br><span class="line"><span class="string">    789'''</span>;</span><br><span class="line"><span class="built_in">print</span>(str);   </span><br><span class="line">输出:<span class="number">123</span></span><br><span class="line">  <span class="number">456</span></span><br><span class="line">      <span class="number">789</span></span><br></pre></td></tr></table></figure></li><li><p>字符串的拼接  如:</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line"><span class="built_in">String</span> str1=<span class="string">'你好'</span>;</span><br><span class="line"><span class="built_in">String</span> str2=<span class="string">'Dart'</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$str1</span><span class="subst">$str2</span>'</span>);      <span class="comment">//输出:你好Dart</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$str1</span>  <span class="subst">$str2</span>'</span>);    <span class="comment">//输出:你好  Dart</span></span><br><span class="line"><span class="built_in">print</span>(str1+str2);         <span class="comment">//输出:你好Dart</span></span><br><span class="line"><span class="built_in">print</span>(str1 + str2);       <span class="comment">//输出:你好Dart</span></span><br><span class="line"><span class="built_in">print</span>(str1+<span class="string">' '</span>+str2);     <span class="comment">//输出:你好 Dart</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li><p>布尔类型是条件判断语句</p><p>使用if…else和true , false做判断:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line"><span class="keyword">var</span> dan=<span class="keyword">false</span>;   <span class="comment">//定义dan为false</span></span><br><span class="line"><span class="keyword">if</span>(dan)&#123;         <span class="comment">//如果dan为true</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'真'</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;           <span class="comment">//否则</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'假'</span>);</span><br><span class="line">&#125;                <span class="comment">//输出:假</span></span><br><span class="line">例<span class="number">2</span>:</span><br><span class="line"><span class="built_in">int</span> a=<span class="number">12</span>;</span><br><span class="line"><span class="built_in">double</span> b=<span class="number">13</span>;</span><br><span class="line"><span class="keyword">if</span>(a==b)&#123;        <span class="comment">//假如a=b</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'a=b'</span>);   </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'a!=b'</span>);</span><br><span class="line">&#125;                <span class="comment">//输出:a!=b (a不等于b)</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;古今中外有学问的人，有成就的人，总是十分注意积累的。知识就是机积累起来的，经验也是积累起来的。我们对什么事情都不应该像“过眼云烟”&lt;/p&gt;
&lt;p&gt;​                                                                                                                                                                                &lt;strong&gt;邓拓&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;入口 , 变量 , 常量 , 常用数据类型 , 字符串的拼接 , 布尔类型&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>NewDay 新的开始</title>
    <link href="http://yoursite.com/2020/03/23/newpapername/"/>
    <id>http://yoursite.com/2020/03/23/newpapername/</id>
    <published>2020-03-23T11:28:18.000Z</published>
    <updated>2020-03-23T16:49:28.895Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客 我正在努力客制化中~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到我的博客 我正在努力客制化中~&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
