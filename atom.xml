<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lao Nian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-22T09:57:09.336Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter学习笔记 (一)</title>
    <link href="http://yoursite.com/2020/04/16/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/04/16/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2020-04-16T06:18:28.000Z</published>
    <updated>2020-05-22T09:57:09.336Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>Flutter基于谷歌的Dart语言,如果没有任何的Dart语言基础,建议先学习Dart语言的基本语法,然后再进入Flutter的学习</strong></p><p>*<em>入口 , 自定义Widget *</em> </p><a id="more"></a><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ul><li>在Flutter中,所有的组件都是类</li><li>在实例化组件/类的时候Flutter同样可以省略掉new关键词</li><li>在Flutter中,所有和数字相关的东西都是double类型,所以要加上.0 例如: 20.0</li></ul><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><ul><li><p>每一个Flutter项目的<strong>lib</strong>目录里都有一个<strong>main.dar</strong>t文件 ,这就是flutter的入口文件</p></li><li><p>在Dart和Flutter中允许我们实例化类的时候不写new关键词</p><p>例1:入口方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;                        <span class="comment">//main方法是Dart的入口方法,在Dart中所有的方法都必须在main方法中</span></span><br><span class="line">    runApp(MyApp());                <span class="comment">//runApp方法是Flutter的入口方法,MyApp是自定义的一个组件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以简写</span></span><br><span class="line"><span class="keyword">void</span> main()=&gt;runApp(MyApp());</span><br></pre></td></tr></table></figure><p>例2:在Flutter入口方法中输出内容,输入内容为从左往右</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    runApp(<span class="keyword">new</span> Center(                          <span class="comment">//Flutter的入口方法,调用Center(cen ter组件,居中), 这等于说实例化Center组件</span></span><br><span class="line">    child:<span class="keyword">new</span> Text(                             <span class="comment">//按Ctrl点击Center可观看使用方式,其中可以传入child参数,表示在Center组件中传入一些内容,Child组件又可以传入一个Text组件,表示文本,用逗号结束是因为这些都是参数</span></span><br><span class="line">    <span class="string">'你好Flutter'</span>,                               <span class="comment">//传入文本,也可以在下面再传入一些Text类的可选参数</span></span><br><span class="line">    textDirection: TextDirection.ltr,            <span class="comment">//按Ctrl点Text类可以看到这是Text中的一个可选参数,Text方向,ltr表示从左往右left to right,返过来从右往左就是rtl</span></span><br><span class="line">    )</span><br><span class="line">    ))</span><br><span class="line">&#125;                                                <span class="comment">//运行在虚拟机上输出: 你好Flutter</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义Widget-组件"><a href="#自定义Widget-组件" class="headerlink" title="自定义Widget/组件"></a>自定义Widget/组件</h3><ul><li><p>如上例,实际上如果我们吧Center组件全部放在runApp的参数中是非常不合理的,因为组件有可能会非常的大,也可能有很多不同的功能,所以一般我们会吧使用自定义组件吧这些组件抽离成一个单独的文件来调用</p></li><li><p>在Flutter中,自定义组件其实就是创建一个类,这个类需要继承<strong>StatelessWidget / StatefulWidget</strong></p></li><li><p>StatelessWidget 是<strong>无状态组件</strong>,状态不可变的widget</p></li><li><p>StatefulWidget 是<strong>有状态组件</strong>,持有的状态可能在widget生命周期改变</p><p>例1:吧上面例子中的Widget单独抽离成一个类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;                <span class="comment">//自定义MyApp类继承自抽象类StatelessWidget</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Center(                              <span class="comment">//吧Widget返回给MyApp</span></span><br><span class="line">        child:<span class="keyword">new</span> Text(</span><br><span class="line">          <span class="string">'你好Flutter'</span>,</span><br><span class="line">          textDirection: TextDirection.ltr,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">25</span>,</span><br><span class="line">            color: Colors.red,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  runApp(MyApp());                                <span class="comment">//调用MyApp 输出: 25大小字体 红色的 你好Flutter</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://nianchuqing.github.io/images/QQ%E6%88%AA%E5%9B%BE20200521200613.png" alt=""></p></li></ul><h3 id="添加背景和导航"><a href="#添加背景和导航" class="headerlink" title="添加背景和导航"></a>添加背景和导航</h3><ul><li><p>例1:使用<strong>MaterialApp</strong> 和 <strong>Scaffold</strong>两个组件给上面例子添加背景和导航</p></li><li><p><strong>MaterialApp</strong>组件是一个很常见的组件非常常用,他封装了应用程序实现Material Design所需要的一些组件 ,一般作为最顶层的根组件使用</p></li><li><p><strong>Scaffold</strong>是Materrial Design布局结构的基本实现,此类提供了用于显示drawer , snackbar 和底部sheet的API</p><ul><li>appBar : 显示在界面顶部的一个AppBar , body : 当前界面所显示的主要内容Widget , drawer : 抽屉菜单控制栏</li></ul></li><li><p>例1: 使用MaterialApp的Scaffold给上例添加导航栏和主题内容</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(                       <span class="comment">//调用Materialapp</span></span><br><span class="line">      home: Scaffold(                         <span class="comment">//传入参数home(主页) 调用Scaffold</span></span><br><span class="line">        appBar: AppBar(                       <span class="comment">//调用Scaffold的appBar导航,传入文本</span></span><br><span class="line">          title: Text(                        <span class="comment">//给导航传入文本</span></span><br><span class="line">            <span class="string">'Flutter Demo'</span></span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        body: Homecontent(),                  <span class="comment">//调用Scaffold的body主题内容,传入之前做好的你好Flutter</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Homecontent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span>   Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">'你好Flutter'</span>,</span><br><span class="line">          textDirection: TextDirection.ltr,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">40</span>,</span><br><span class="line">            color: Colors.red,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://nianchuqing.github.io/images/QQ%E5%9B%BE%E7%89%8720200522174819.png" alt=""></p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;Flutter基于谷歌的Dart语言,如果没有任何的Dart语言基础,建议先学习Dart语言的基本语法,然后再进入Flutter的学习&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;入口 , 自定义Widget *&lt;/em&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记, Flutter" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0-Flutter/"/>
    
    
      <category term="笔记, Flutter" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0-Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (九)</title>
    <link href="http://yoursite.com/2020/04/11/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B9%9D/"/>
    <id>http://yoursite.com/2020/04/11/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B9%9D/</id>
    <published>2020-04-11T15:13:02.000Z</published>
    <updated>2020-04-12T13:15:11.450Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Dart中的库 , 自定义库 , 系统库 , 第三方库 , 库的重命名 , 部分导入 , 延迟加载 , 异步 async和await</strong></p><a id="more"></a><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><h3 id="Dart中的库"><a href="#Dart中的库" class="headerlink" title="Dart中的库"></a>Dart中的库</h3><ul><li><p>在Dart中库的使用主要通过<strong>import</strong>关键词引入</p></li><li><p><strong>library</strong>指令可以创建一个库,每个Dart文件都是一个库,即使没有使用library指令来指定</p></li><li><p>Dart中的库主要有三种:</p><ul><li><p><strong>自定义库</strong>: import ‘lib/xxx.dart’; <strong><a href="https://nianchuqing.github.io/2020/04/05/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/#%E6%8A%BD%E7%A6%BB%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">(例:抽离自定义类和调用)</a></strong></p></li><li><p><strong>系统内置库</strong>: import ‘dart:math’; , import ‘dart:io’; , import ‘dart:convert’;</p><p>例1:系统内置库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;          <span class="comment">//引入Dart内置的库,dart:math是方法库,按Ctrl键点击可进入库的使用详情文件</span></span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(min(<span class="number">12</span>,<span class="number">23</span>));         <span class="comment">//调用math库中的方法,求两个数的最小数 输出: 12</span></span><br><span class="line">  <span class="built_in">print</span>(max(<span class="number">12</span>,<span class="number">50</span>));         <span class="comment">//调用math库中的方法,求两个数的最大数 输出: 50     </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dart:io dart:convert 是请求api接口常用的库</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Pub包管理系统中的库</strong>: <a href="https://pub.dev/packages" target="_blank" rel="noopener">https://pub.dev/packages</a> , <a href="https://pub.flutter-io.cn/packages" target="_blank" rel="noopener">https://pub.flutter-io.cn/packages</a> , <a href="https://pub.dartlang.org/flutter/" target="_blank" rel="noopener">https://pub.dartlang.org/flutter/</a></p></li><li><p>Pub包使用时首先应先在项目根目录新建<strong>pubspec.yaml</strong>文件,内容容下:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name: Run                                         <span class="comment">//名称,可以随意起</span></span><br><span class="line">description: A simple command-line application.   <span class="comment">//项目描述</span></span><br><span class="line">dependencies:</span><br><span class="line">  dart_console: ^<span class="number">0.6</span><span class="number">.0</span>                            <span class="comment">//吧想要依赖的包的安装码输入</span></span><br><span class="line"><span class="comment">//举例的安装码在这里查看:https://pub.dev/packages/dart_console#-installing-tab-</span></span><br></pre></td></tr></table></figure></li><li><p>然后在cmd中使用cd指令cd到你的项目文件夹中,执行<strong>pub get</strong>指令进行下载安装想要的库 ,在Vscode中保存pubspec.yaml文件夹,就会自动执行pub get指令</p></li><li><p>最后在项目中引用该库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:dart_console/dart_console.dart'</span>;</span><br><span class="line"><span class="comment">//该库使用文档位置:https://pub.dev/packages/dart_console#-example-tab-</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="库的重命名"><a href="#库的重命名" class="headerlink" title="库的重命名"></a>库的重命名</h3><ul><li><p>冲突解决: 当引入的两个库中有相同的名称标识符的时候,如果是java通常我们通过协商完整的包名路径来指定是用哪个</p><p>例1:如果两个库的名称一个是Person1,一个是Person2,而库的内容的类的名称都是Person类,这样如果我们同时引入这两个库的时候在实例化的时候就会报错,因为两个库都有同名称的Person类,语言不知道该实例化哪个,这时可使用 <strong>as</strong> 关键词对其中一个进行重命名</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用as关键词给Person2重命名</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/Person1.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/Person2.dart'</span> <span class="keyword">as</span> lib; </span><br><span class="line"><span class="comment">//实例化时调用lib.Person即可,等于Person2库内的所有重名的类都可以在前面添加lib来重命名</span></span><br><span class="line">Person p1=Person();              <span class="comment">//Person1库中的Person类</span></span><br><span class="line">lib.Person p2=lib.Person();      <span class="comment">//Person2库中的Person类</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="部分导入"><a href="#部分导入" class="headerlink" title="部分导入"></a>部分导入</h3><ul><li><p>如果只需要导入库的一部分,有两种方法:</p><ul><li><p>1.只导入需要的部分,使用<strong>show</strong>关键词 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:lib1/lib1.dart'</span> <span class="keyword">show</span> foo;   <span class="comment">//仅导入foo方法</span></span><br></pre></td></tr></table></figure></li><li><p>2.隐藏不需要的部分,使用<strong>hide</strong>关键词 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:lib2/lib2.dart'</span> <span class="keyword">hide</span> foo;   <span class="comment">//仅隐藏foo方法</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><ul><li><p>延迟加载也称为<strong>懒加载</strong>,可以在需要的时候再进行加载</p></li><li><p>懒加载最大的好处是可以减少APP的启动时间</p></li><li><p>懒加载使用 <strong>deferred as</strong> 关键词来指定 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:deferred/hello.dart'</span> <span class="keyword">deferred</span> <span class="keyword">as</span> hello;</span><br></pre></td></tr></table></figure></li><li><p>当需要使用时,需要使用 <strong>loadLibrary()</strong> 方法来加载 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greet()<span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> hello.loadLibrary();</span><br><span class="line">    hello.printGreeting();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="异步-async和await"><a href="#异步-async和await" class="headerlink" title="异步 async和await"></a>异步 async和await</h3><ul><li><p>只有<strong>async</strong>方法才能使用<strong>await</strong>关键词调用方法</p></li><li><p>如果调用别的async方法必须使用await关键词</p></li><li><p>async是让方法变成异步,await是等待异步方法执行完成</p><p>例1:async和await的使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main()<span class="keyword">async</span>&#123;                            <span class="comment">//异步方法</span></span><br><span class="line">  <span class="keyword">var</span> result=<span class="keyword">await</span> testAsync();         <span class="comment">//异步方法需要在异步方法中被await关键词调用</span></span><br><span class="line">  <span class="built_in">print</span>(result);</span><br><span class="line">&#125;</span><br><span class="line">testAsync()<span class="keyword">async</span>&#123;                       <span class="comment">//异步方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'这是一个async方法,需要await关键词调用'</span>;</span><br><span class="line">&#125;                                       <span class="comment">//输出: 这是一个async方法,需要await关键词调用</span></span><br></pre></td></tr></table></figure></li></ul><p>妈耶终于结束了…下一步 进军Flutter</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Dart中的库 , 自定义库 , 系统库 , 第三方库 , 库的重命名 , 部分导入 , 延迟加载 , 异步 async和await&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (八)</title>
    <link href="http://yoursite.com/2020/04/11/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AB/"/>
    <id>http://yoursite.com/2020/04/11/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AB/</id>
    <published>2020-04-11T10:20:23.000Z</published>
    <updated>2020-04-11T15:14:13.739Z</updated>
    
    <content type="html"><![CDATA[<p><strong>泛型 , 泛型方法 , 泛型类 , 泛型接口</strong></p><a id="more"></a><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><ul><li><p>通俗的理解:泛型就是解决<strong>类</strong>,<strong>接口</strong>,<strong>方法</strong>的<strong>重用性</strong>,以及对<strong>不特定数据</strong>类型的支持(对不特定数据类型的数据校验)</p></li><li><p>如果我们想要自定义一个方法,他传入的数据类型是什么那么返回的也是什么类型的话可以这么写 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> getData(<span class="built_in">String</span> value)&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> getData(<span class="built_in">int</span> value)&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这么写的话你想传入String返回String就必须写一个方法,如果你又需要传入int再返回int的话就需要再写一个方法,会造成方法的<strong>冗(rong)余</strong>,当然我们可以在自定义方法的时候不给他指定类型,这样的话它就会传入什么类型返回什么类型但是这样同时也就放弃了自定义方法的<strong>类型校验</strong>,例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getData(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'xxx'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种情况下如果你调用时传入 int类型的123,返回的却是String类型的XXX</span></span><br></pre></td></tr></table></figure></li><li><p>想要同时满足传入什么类型返回什么类型和只能传入什么类型的类型校验的话,可以使用泛型方法</p><p>例1:如何定义泛型方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T getData&lt;T&gt;(T value)&#123;       <span class="comment">//第一个T为定义泛型,定义泛型可以是任何大写字母但一般我们用T,第一个T表示返回类型校验</span></span><br><span class="line">    <span class="keyword">return</span> value;            <span class="comment">//另外两个T表示传入数据校验</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(getData&lt;<span class="built_in">String</span>&gt;(<span class="string">'你好'</span>));<span class="comment">//在调用时添加书名号,填入想要设置的传入返回类型 输出: 你好</span></span><br><span class="line">----------------------------------------</span><br><span class="line">T getData&lt;T&gt;(T value)&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="built_in">print</span>(getData&lt;<span class="built_in">int</span>&gt;(<span class="number">666</span>));     <span class="comment">//输出: 666</span></span><br></pre></td></tr></table></figure><p>例2:只对传入的参数进行校验,不对返回的类型进行校验</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getDate&lt;T&gt;(T value)&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><ul><li><p>泛型类同泛型方法的功能一致,<strong>List</strong>就是一个语言自带的泛型类<strong>(<a href="https://nianchuqing.github.io/2020/03/24/Dart学习笔记-二/" target="_blank" rel="noopener">List定义数组的两种方式 例2</a>)</strong></p></li><li><p>自定义泛型类和自定义泛型方法一样</p><p>例1:非泛型,在一个自定义类里定义一个指定类型的List并循环遍历</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printclass</span></span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list=<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();           <span class="comment">//指定List传入内容为String类型</span></span><br><span class="line">  <span class="keyword">void</span> add(<span class="built_in">String</span> value)&#123;             <span class="comment">//没有返回值的自定义add方法,指定传入类型为String,</span></span><br><span class="line">    list.add(value);                  <span class="comment">//吧传入内容list.add进数组中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;           </span><br><span class="line">    list.forEach((value)&#123;             <span class="comment">//自定义方法中用forEach循环遍历list</span></span><br><span class="line">      <span class="built_in">print</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  Printclass p=Printclass();    </span><br><span class="line">  p.add(<span class="string">'张三'</span>);                        <span class="comment">//调用add方法传入数据</span></span><br><span class="line">  p.add(<span class="string">'李四'</span>);</span><br><span class="line">  p.add(<span class="string">'王五'</span>);</span><br><span class="line">  p.printInfo();                        <span class="comment">//调用printInfo方法循环遍历 输出: 张三  李四  王五</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2: 使用泛型类方法使其指定不特定数据类型校验,把例1中的案例改成泛型类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printclass</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list=<span class="built_in">List</span>&lt;T&gt;();</span><br><span class="line">  <span class="keyword">void</span> add(T value)&#123;</span><br><span class="line">    list.add(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;</span><br><span class="line">    list.forEach((value)&#123;</span><br><span class="line">      <span class="built_in">print</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  Printclass p=Printclass&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  p.add(<span class="string">'张三'</span>);</span><br><span class="line">  p.add(<span class="string">'李四'</span>);</span><br><span class="line">  p.add(<span class="string">'王五'</span>);</span><br><span class="line">  p.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li><p>定义泛型接口的方法和泛型类相同</p><p>例1:实现数据缓存的功能,有<strong>文件缓存(flieCache)</strong>和<strong>内存缓存(MemoryCache)</strong>,内存缓存和文件缓存按照接口约束实现</p><ul><li><p>定义一个泛型接口,约束实现它的子类必须有<strong>getByKey(key)</strong>和<strong>setByKey(key,value)</strong></p></li><li><p>要求setByKey的时候的value的类型和实例化子类的时候的指定的类型一致</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;                              <span class="comment">//泛型接口,这个T表示类型校验</span></span><br><span class="line">  <span class="keyword">void</span> getByKey(<span class="built_in">String</span> key);           </span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key,T value);                  <span class="comment">//泛型方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlieCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;                <span class="comment">//想要实现泛型接口,实现它的类也必须是泛型类</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> getByKey(<span class="built_in">String</span> key) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是一个文件缓存,把<span class="subst">$key</span> 和<span class="subst">$value</span> 写入文件'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> getByKey(<span class="built_in">String</span> key) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  FlieCache f=FlieCache&lt;<span class="built_in">String</span>&gt;();                     <span class="comment">//实例化时填入指定类型,除了String,int,还能指定Map类型,List类型 如下:</span></span><br><span class="line">  f.setByKey(<span class="string">'index'</span>, <span class="string">'首页目录'</span>);                      <span class="comment">//调用时按照指定类型输入指定类型的数据,如果指定String类型却输入int类型数据的话就会报错</span></span><br><span class="line">&#125;                                                      <span class="comment">//输出: 我是一个文件缓存,把index 和首页目录 写入文件</span></span><br><span class="line"><span class="comment">//  FlieCache f=FlieCache&lt;List&gt;();</span></span><br><span class="line"><span class="comment">//  f.setByKey('index', ['首页目录',20]);               //输出: 我是一个文件缓存,把index 和[首页目录 20] 写入文件</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;泛型 , 泛型方法 , 泛型类 , 泛型接口&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (七)</title>
    <link href="http://yoursite.com/2020/04/10/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/"/>
    <id>http://yoursite.com/2020/04/10/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/</id>
    <published>2020-04-10T01:45:04.000Z</published>
    <updated>2020-04-11T10:20:51.370Z</updated>
    
    <content type="html"><![CDATA[<p><strong>静态成员和非静态成员 , 对象操作符 , 类的继承 , 子类覆写 , 抽象类 , 接口 , 一个类实现多个接口 , Dart中的Mixins</strong></p><a id="more"></a><h3 id="Dart中的静态成员与非静态成员"><a href="#Dart中的静态成员与非静态成员" class="headerlink" title="Dart中的静态成员与非静态成员"></a>Dart中的静态成员与非静态成员</h3><ul><li><p>使用<strong>static</strong> 关键词可定义<strong>静态属性</strong>和<strong>静态方法</strong></p></li><li><p>静态方法不能访问非静态成员,非静态方法可以访问静态成员</p></li><li><p>类中非静态方法和属性必须实例化后访问,静态成员可以不用实例化也能访问</p><p>例1:静态成员与非静态成员</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> name=<span class="string">'张三'</span>;       <span class="comment">//静态属性</span></span><br><span class="line">  <span class="built_in">int</span> age=<span class="number">20</span>;                     <span class="comment">//非静态属性</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">show</span>()&#123;             <span class="comment">//静态方法</span></span><br><span class="line">    <span class="built_in">print</span>(name);                  <span class="comment">//静态方法调用静态属性</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;               <span class="comment">//非静态方法</span></span><br><span class="line">  <span class="built_in">print</span>(name);                    <span class="comment">//非静态方法调用静态属性</span></span><br><span class="line">  <span class="built_in">print</span>(age);                     <span class="comment">//非静态方法调用非静态属性</span></span><br><span class="line">  <span class="keyword">show</span>();                         <span class="comment">//非静态方法调用静态方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  Person p=Person();              <span class="comment">//因有非静态成员所以要实例化</span></span><br><span class="line">  <span class="built_in">print</span>(Person.name);             <span class="comment">//静态成员可不用实例化直接调用    输出: 张三</span></span><br><span class="line">  Person.<span class="keyword">show</span>();                  <span class="comment">//也可实例化之后调用             输出: 张三</span></span><br><span class="line">  p.printInfo();                  <span class="comment">//非静态成员必须实例化后调用      输出: 张三 20 张三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象操作符"><a href="#对象操作符" class="headerlink" title="对象操作符"></a>对象操作符</h3><ul><li><p>Dart中的对象操作符有:</p><p><strong>?</strong>条件运算符(了解) , <strong>as</strong>类型转换符 , <a href="https://nianchuqing.github.io/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/#is%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener"><strong>is</strong>类型判定符</a> , <strong>..</strong>级联操作符(连缀)</p></li><li><p>连缀的第一行不要添加分号,最后一行再加,可以省略相同的开头</p><p>例1:连缀的使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/person.dart'</span>;              <span class="comment">//调用Person类</span></span><br><span class="line">main()&#123;</span><br><span class="line">  Person p=Person(<span class="string">'张三'</span>, <span class="number">20</span>);         <span class="comment">//实例化Person类</span></span><br><span class="line">  p.getInfo();                        <span class="comment">//输出: 姓名:张三    年龄:20  </span></span><br><span class="line">  p.name=<span class="string">'李四'</span>;                      </span><br><span class="line">  p.age=<span class="number">40</span>;</span><br><span class="line">  p.getInfo();                        <span class="comment">//输出: 姓名:李四    年龄:40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可使用级联操作符进行简化</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/person.dart'</span>;              <span class="comment">//调用Person类</span></span><br><span class="line">main()&#123;</span><br><span class="line">  Person p=Person(<span class="string">'张三'</span>, <span class="number">20</span>);         <span class="comment">//实例化Person类</span></span><br><span class="line">  p..getInfo()                        <span class="comment">//输出: 姓名:张三    年龄:20  </span></span><br><span class="line">  ..name=<span class="string">'李四'</span>                      </span><br><span class="line">  ..age=<span class="number">40</span></span><br><span class="line">  ..getInfo();                        <span class="comment">//输出: 姓名:李四    年龄:40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><ul><li><p>子类可通过<strong>extends</strong>关键词来继承父类</p></li><li><p>子类会继承父类里可见的属性和方法,但不会继承构造函数</p></li><li><p>子类能覆写父类的方法和<strong>getter ,  setter</strong></p></li><li><p>使用<strong>super</strong>关键词还可以给父类的命名构造函数传参</p><p>例1:子类继承父类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line">  getInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>,<span class="subst">$age</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;                                    <span class="comment">//子类继承父类</span></span><br><span class="line">  Web(<span class="built_in">String</span> name, <span class="built_in">int</span> age,<span class="built_in">String</span> sex) : <span class="keyword">super</span>(name, age)&#123;   <span class="comment">//子类构造函数,super是吧子类实例化时的数据赋给父类</span></span><br><span class="line">    <span class="keyword">this</span>.sex=sex;                                            <span class="comment">//子类自己的属性赋予实例化关联</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">String</span> sex;                                                <span class="comment">//子类可以定义自己的属性</span></span><br><span class="line">  <span class="keyword">void</span> run()&#123;                                                <span class="comment">//子类可以定义自己的方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>  性别:<span class="subst">$sex</span>  年龄:<span class="subst">$age</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">var</span> p=Person(<span class="string">'张三'</span>, <span class="number">20</span>);                                   <span class="comment">//我们这里首先实例化了父类为p</span></span><br><span class="line">  p.getInfo();                                                <span class="comment">//p输出: 张三,20</span></span><br><span class="line">  <span class="keyword">var</span> w=Web(<span class="string">'李四'</span>, <span class="number">25</span>, <span class="string">'女'</span>);                                 <span class="comment">//随后实例化了子类为w</span></span><br><span class="line">  w.getInfo();                                                <span class="comment">//子类可以调用父类的方法和属性,因为在实例化w的同时吧w实例化赋予的数据通过super传给了父类,所以这里调用父类的方法输出的是: 李四,25</span></span><br><span class="line">  w.run();                                                    <span class="comment">//子类可以调用自己的方法 输出: 姓名:李四  性别:女  年龄:25</span></span><br><span class="line">  p.getInfo();                                                <span class="comment">//父类调用父类的方法,因为P实例化时传入数据是张三和20,这里输出的是p不是w不受子类传输的数据影响,所以输出依旧是: 张三,20 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2:使用<strong>super</strong>关键词还可以给父类的命名构造函数传参</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person.now(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">DateTime</span>.now());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//例如Person有一个Person.now的构造函数</span></span><br><span class="line">Web.now(<span class="built_in">String</span> name, <span class="built_in">int</span> age,<span class="built_in">String</span> sex) : <span class="keyword">super</span>.now(name, age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//则继承之后再子类中也可以添加一个super.now的构造函数,实例化调用时也可以</span></span><br><span class="line"> <span class="keyword">var</span> w=Web.now(<span class="string">'李四'</span>, <span class="number">25</span>, <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="子类覆写父类的方法"><a href="#子类覆写父类的方法" class="headerlink" title="子类覆写父类的方法"></a>子类覆写父类的方法</h3><ul><li><p>覆写就是在子类中使用和父类里<strong>同样名字的方法</strong>来重写方法</p></li><li><p>实例化子类后调用此方法时默认调用覆写后的方法</p><p>例1:覆写父类的方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  Person(<span class="keyword">this</span>.name);</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(name);                                <span class="comment">//父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">String</span> sex;</span><br><span class="line">  Web(<span class="built_in">String</span> name,<span class="built_in">String</span> sex) : <span class="keyword">super</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span>                                    <span class="comment">//覆写方法时点击方法名点修复会自动显示,也可以手动输入,@override可以判断覆写方法名和父类方法名是否完全一致,不一致的话会报错</span></span><br><span class="line">  <span class="keyword">void</span> run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>  性别:<span class="subst">$sex</span>,正在打扫卫生'</span>);  <span class="comment">//覆写的方法,在子类调用此方法时会优先调用子类覆写的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">var</span> w=Web(<span class="string">'张三'</span>, <span class="string">'女'</span>);</span><br><span class="line">  w.run();                                      <span class="comment">//调用子类的run方法输出: 姓名:张三  性别:女,正在打扫卫生</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用super关键词可在子类的方法中调用父类的方法</p><p>例2:在子类中调用父类方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  Person(<span class="keyword">this</span>.name);</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'正在工作中...'</span>);                        <span class="comment">//父类中方法work</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">String</span> sex;</span><br><span class="line">  Web(<span class="built_in">String</span> name,<span class="built_in">String</span> sex) : <span class="keyword">super</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>  性别:<span class="subst">$sex</span>,正在打扫卫生'</span>);   </span><br><span class="line">    <span class="keyword">super</span>.work();                             <span class="comment">//在子类的方法中使用super.work来调用父类的方法</span></span><br><span class="line">  <span class="comment">//work(); 可能是新版本的原因,似乎在Dart中现在不用super关键词也可以直接在子类中调用父类方法 </span></span><br><span class="line">  &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">var</span> w=Web(<span class="string">'张三'</span>, <span class="string">'女'</span>);</span><br><span class="line">  w.run();                                        <span class="comment">//输出: 姓名:张三  性别:女,正在打扫卫生</span></span><br><span class="line">                                                  <span class="comment">//      正在工作中...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>Dart中的抽象类主要用于<strong>定义标准</strong>,子类可以继承抽象类,也可以实现抽象类接口</p></li><li><p>抽象类通过<strong>obstract</strong>关键词定义(声明)</p></li><li><p>Dart中的抽象方法不能用obstract声明,Dart中<strong>没有方法体</strong>的方法,我们称之为<strong>抽象方法</strong></p></li><li><p>如果子类继承抽象类,那么必须要<strong>实现</strong>抽象类中的抽象方法</p></li><li><p>如果吧抽象类当做<strong>接口</strong>实现的话,必须要<strong>实现</strong>抽象类里定义的<strong>所有属性和方法</strong></p></li><li><p>抽象类<strong>不可以</strong>实例化,只有继承它的子类可以实例化</p></li><li><h4 id="多态的定义"><a href="#多态的定义" class="headerlink" title="多态的定义"></a>多态的定义</h4><ul><li>多态就是父类定义的一个方法不实现,让继承他的子类实现,每个子类有不同的表现</li><li>子类继承父类抽象类的时候也可以有自己的普通方法,但如果想在实例化后只能调用父类的抽象类而不能用自己的普通类,可以吧子类的实例赋值给父类的引用,这就是普通意义上的多态(例2)</li></ul><p>例1:定义一个抽象类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;                     <span class="comment">//抽象类,不可实例化</span></span><br><span class="line">  eat();                                   <span class="comment">//抽象方法,子类必须实现</span></span><br><span class="line">  run();        </span><br><span class="line">  printInfo()&#123;                             <span class="comment">//抽象类中可以有一般方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是一个抽象类中的普通方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;                   <span class="comment">//子类继承抽象类</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat()&#123;                                    <span class="comment">//子类覆写并实现父类的抽象方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'小狗吃骨头'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'小狗RushB'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'小猫吃老鼠'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'小猫RushB'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  Dog d=Dog();                                 <span class="comment">//实例化子类,抽象类不可实例化</span></span><br><span class="line">  d.eat();                                     <span class="comment">//输出: 小狗吃骨头</span></span><br><span class="line">  d.printInfo();                               <span class="comment">//输出: 我是一个抽象类中的普通方法</span></span><br><span class="line">  Cat c=Cat();                                 <span class="comment">//多态的一种</span></span><br><span class="line">  c.eat();                                     <span class="comment">//输出: 小猫吃老鼠 </span></span><br><span class="line">  c.run();                                     <span class="comment">//输出: 小猫RushB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2:把子类的实例赋值给父类的引用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在实例化时,吧子类的实例赋值给父类的引用</span></span><br><span class="line">Animal d=Dog();</span><br><span class="line"><span class="comment">//这时候就只能调用Animal中的方法,不能调用Dog中的方法了</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li><p>Dart的接口没有<strong>interface</strong>关键字定义接口,而是普通类或抽象类都哦可以作为接口被实现,但和其他语言一样同样使用<strong>implements</strong>关键词进行实现</p></li><li><p>extends抽象类和implements的<strong>区别</strong>:</p><ul><li>如果要使用抽象类里面的方法,并且要用抽象方法约束子类的话我们就用extends方法继承抽象类</li><li>如果只是吧抽象类当做标准的话,我们就用implements实现抽象类</li></ul></li><li><p>如果实现的类是普通类,会将普通类或抽象类中的属性和方法全部覆写一遍</p></li><li><p>因为抽象类可以定义抽象方法,普通类不可以,所以如果要实现接口,一般会使用抽象类定义接口</p><p>例1:定义一个DB库,支持mysql , mssql , mongodb</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;                     <span class="comment">//当做接口,接口就是约定/规范</span></span><br><span class="line">  <span class="built_in">String</span> url;                          <span class="comment">//数据库的链接地址</span></span><br><span class="line">add(date);                        </span><br><span class="line">  save();</span><br><span class="line">  delete();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">implements</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> url;</span><br><span class="line">  Mysql(<span class="keyword">this</span>.url);                       <span class="comment">//接口拥有自己的构造函数</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add(date) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'这是mysql的add方法<span class="subst">$date</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  delete() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  save() &#123;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mssql</span> <span class="keyword">implements</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> url;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add(date) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  delete() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  save() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mongodb</span> <span class="keyword">implements</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> url;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add(date) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  delete() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  save() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> mysql=Mysql(<span class="string">'xxx'</span>);</span><br><span class="line">  mysql.add(<span class="string">'123ddas'</span>);                <span class="comment">//输出: 这是mysql的add方法123ddas           </span></span><br><span class="line">&#125;</span><br><span class="line">                                       <span class="comment">//一般情况下接口和方法会被抽离到单独文件,然后调用</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="一个类实现多个接口"><a href="#一个类实现多个接口" class="headerlink" title="一个类实现多个接口"></a>一个类实现多个接口</h3><ul><li><p>一个类可通过implements关键词来实现多个接口,但同时要实现多个接口里所有的属性和方法</p></li><li><p>extends继承并不能同时实现多个接口</p><p>例1:定义两个接口,然后用一个来同时实现两个接口</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  printA();</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  printB();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;               <span class="comment">//C类同时实现A和B两个接口</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> name;                        <span class="comment">//必须同时实现两个类里所有的方法和属性</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  printA() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  printB() &#123;</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> c=C();                          <span class="comment">//实例化C类后可调用里面所有的方法和属性</span></span><br><span class="line">  c.name=<span class="string">'张三'</span>; </span><br><span class="line">  c.printA();                         <span class="comment">//输出: A方法</span></span><br><span class="line">  c.printB();                         <span class="comment">//输出: 张三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Dart中的Mixins-混入"><a href="#Dart中的Mixins-混入" class="headerlink" title="Dart中的Mixins(混入)"></a>Dart中的Mixins(混入)</h3><ul><li><p>在Dart中可以使用<strong>mixins</strong>的<strong>with</strong>关键词实现类似多继承的功能</p></li><li><p>作为mixins的类只能继承自object,不能继承其他类</p><ul><li>指C如果要mixins A和B,则A和B必须是一个类,而不是继承自其他类的子类</li></ul></li><li><p>作为mixins的类不能有<strong>构造函数</strong></p></li><li><p>一个类可以mixins多个mixins类</p></li><li><p>mixins绝不是继承,也不是接口,而是一种全新的特性</p></li><li><p>如果实例化后要调用的方法在几个类中都有同名方法,则以with关键词后最后的类覆盖前面的类<strong>(例3)</strong></p><p>例1:使用mixins的with关键词实现类似多继承</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;                    <span class="comment">//被mixins的类中不能有构造函数</span></span><br><span class="line">  printA()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A Run'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  printB()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B Run'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">with</span> <span class="title">B</span>,<span class="title">A</span></span>&#123;              <span class="comment">//C with B和A</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">var</span> c=C();</span><br><span class="line">  c.printB();                  <span class="comment">//输出: B</span></span><br><span class="line">  c.printA();                  <span class="comment">//输出: A</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2:一个类可以mixins多个mixins类,有两种方法,第一种直接mixins</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">with</span> <span class="title">Person</span>,<span class="title">B</span>,<span class="title">A</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例3:第二种方法则可以首先使用C继承Person再mixins A和B 则父类Person中可以拥有构造函数,C中也要覆写Person的构造函数 </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line">  printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>,<span class="subst">$age</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Person Run'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  printA()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A Run'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  printB()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B Run'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="title">with</span> <span class="title">B</span>,<span class="title">A</span></span>&#123;                    <span class="comment">//可继承Person然后再WithB和A,则可以拥有Person的构造函数</span></span><br><span class="line">  C(<span class="built_in">String</span> name, <span class="built_in">num</span> age) : <span class="keyword">super</span>(name, age);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">var</span> c=C(<span class="string">'张三'</span>,<span class="number">20</span>);                                <span class="comment">//实例化时要传参</span></span><br><span class="line">  c.run();                                          <span class="comment">//因为class C extends Person with B,A按顺序A在最后面,后面的覆盖前面的,所以输出: A Run</span></span><br><span class="line">  c.printA();                                       <span class="comment">//输出: A</span></span><br><span class="line">  c.printInfo();                                    <span class="comment">//这里调用了Person类父类的方法 输出: 张三,20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;静态成员和非静态成员 , 对象操作符 , 类的继承 , 子类覆写 , 抽象类 , 接口 , 一个类实现多个接口 , Dart中的Mixins&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (六)</title>
    <link href="http://yoursite.com/2020/04/05/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>http://yoursite.com/2020/04/05/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/</id>
    <published>2020-04-05T11:14:01.000Z</published>
    <updated>2020-04-08T11:46:44.895Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类</strong>-<strong>自定义类 , 构造函数 , 类的抽离和调用 , 私有方法和私有属性 , 类中的getter和setter</strong></p><a id="more"></a><h2 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h2><h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><ul><li><p>类由<strong>属性</strong>和<strong>方法</strong>组成,类可以多次实例化</p></li><li><p><strong>List , Map</strong> 是系统自带的类</p></li><li><p>自定义类要在main入口方法之外定义,自定义类的名称的首字母必须是大写</p><p>例1L自定义类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;                                              <span class="comment">//自定义类</span></span><br><span class="line">    <span class="built_in">String</span> name=<span class="string">'张三'</span>;</span><br><span class="line">    <span class="built_in">int</span> age=<span class="number">20</span>;                                            <span class="comment">//类的属性</span></span><br><span class="line">    getInfo()&#123;                                             <span class="comment">//类的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>    年龄:<span class="subst">$age</span>'</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;                                                    <span class="comment">//自定义类要在入口方法外定义</span></span><br><span class="line">    <span class="keyword">var</span> p1=<span class="keyword">new</span> Person();                                   <span class="comment">//实例化,吧自定义类Person实例化赋予p1</span></span><br><span class="line">    <span class="built_in">print</span>(p1.name);                                        <span class="comment">//可单独打印出自定义类的某项属性 输出: 姓名:张三</span></span><br><span class="line">    p1.getInfo();                                          <span class="comment">//可单独打印出自定义类的某个方法: 输出: 姓名:张三    年龄:20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2: 如何改变例1中的age属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Person类中添加自定义方法</span></span><br><span class="line">setInfo(<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在实例p1中调用此方法</span></span><br><span class="line">p1.setInfo(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">print</span>(p1.age);                        <span class="comment">//输出: 30</span></span><br><span class="line">p1.getInfo();                         <span class="comment">//输出: 姓名:张三    年龄:30</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h3><ul><li><p>实例化时<strong>自动触发</strong>的方法,就叫做<strong>构造函数</strong></p></li><li><p>默认<strong>构造函数</strong>的名字和<strong>类</strong>的<strong>名字相同</strong></p><p>例1:构造函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;                                          </span><br><span class="line">    <span class="built_in">String</span> name=<span class="string">'张三'</span>;</span><br><span class="line">    <span class="built_in">int</span> age=<span class="number">20</span>;                                            </span><br><span class="line">    getInfo()&#123;                              </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>    年龄:<span class="subst">$age</span>'</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    Person()&#123;                          <span class="comment">//构造函数</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'这是一个构造函数'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">var</span> p1=Person();              <span class="comment">//构造函数在自定义类实例化后就会自动触发,实例化时可省略new关键词</span></span><br><span class="line">&#125;                                 <span class="comment">//输出: 这是一个构造函数</span></span><br></pre></td></tr></table></figure><p>例2:构造函数传入参数,达到动态给Person类改变属性的目的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;                                             </span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;                                           </span><br><span class="line">    Person(<span class="built_in">String</span> name,<span class="built_in">int</span> age)&#123;           <span class="comment">//给构造函数定义形参</span></span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">      <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> getInfo()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>    年龄:<span class="subst">$age</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">var</span> p1=Person(<span class="string">'老念'</span>,<span class="number">25</span>);               <span class="comment">//实例化自定义类同时传入实参</span></span><br><span class="line">    Person p2=Person(<span class="string">'张三'</span>, <span class="number">20</span>);</span><br><span class="line">    p1.getInfo();                           <span class="comment">//然后调用Person类的getInfo参数 输出: 姓名:老念    年龄:25</span></span><br><span class="line">    p2.getInfo();                           <span class="comment">//输出: 姓名:张三    年龄:20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数可简写为一句话</span></span><br><span class="line">Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br></pre></td></tr></table></figure></li></ul><h4 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title="命名构造函数"></a>命名构造函数</h4><ul><li><p>默认构造函数只有一个,命名构造函数可以有多个,同样可以传入参数</p><p>例1:学习常量时的final可调用的DateTime.now中的DateTime是类,now是命名构造函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> a=<span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line"><span class="built_in">print</span>(a);                            </span><br><span class="line"><span class="comment">//a=new DateTime.now();中的new可忽略为</span></span><br><span class="line"><span class="keyword">final</span> a=<span class="built_in">DateTime</span>.now();</span><br><span class="line"><span class="built_in">print</span>(a);                                <span class="comment">//输出: 2020-04-08 16:46:37.804031</span></span><br></pre></td></tr></table></figure><p>例2:命名构造函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;                                             </span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;                                           </span><br><span class="line">    Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);              <span class="comment">//简写的构造函数</span></span><br><span class="line">    Person.now(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age)&#123;          <span class="comment">//简写的命名构造函数,可传参姓名和年龄以外还有内容</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">DateTime</span>.now());                 <span class="comment">//实例化同时会打印出DateTime.now();函数,打印出当前时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> getInfo()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>    年龄:<span class="subst">$age</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">var</span> p1=Person(<span class="string">'老三'</span>, <span class="number">20</span>);                    <span class="comment">//实例化默认构造函数</span></span><br><span class="line"><span class="keyword">var</span> p2=Person.now(<span class="string">'老念'</span>, <span class="number">25</span>);                <span class="comment">//实例化Person类的命名构造函数now</span></span><br><span class="line">p1.getInfo();                               </span><br><span class="line">p2.getInfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: </span></span><br><span class="line"><span class="comment">//2020-04-08 16:53:37.430958</span></span><br><span class="line"><span class="comment">//姓名:老三    年龄:20</span></span><br><span class="line"><span class="comment">//姓名:老念    年龄:25</span></span><br><span class="line"><span class="comment">//注意,print DateTime.now函数在实例化的时候就会自动执行,所以被打印在第一行</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="抽离自定义类和调用"><a href="#抽离自定义类和调用" class="headerlink" title="抽离自定义类和调用"></a>抽离自定义类和调用</h3><ul><li><p>吧自定义类单独抽离成为一个文件,模块化可随时调用更加方便维护,更加简洁</p></li><li><p>调用方法为: <u><strong>import’lib/person.dart’;</strong></u> 引号中内容为你的文件所在位置</p><p>例1:吧类放在新建文件夹中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里以vscode为例,首先在vscode左侧编辑器中新建一个lib文件夹,然后文件夹中新建文件名为person.dart,然后吧自定义类的全部内容剪切放入此文件中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;                                             </span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;                                           </span><br><span class="line">    Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line">    Person.now(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age)&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">DateTime</span>.now());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> getInfo()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'姓名:<span class="subst">$name</span>    年龄:<span class="subst">$age</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随后在需要调用person类的工作文件中最顶部输出调用方法</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/person.dart'</span>;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">var</span> p1=Person(<span class="string">'老三'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> p2=Person.now(<span class="string">'老念'</span>, <span class="number">25</span>);</span><br><span class="line">p1.getInfo();</span><br><span class="line">p2.getInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="私有方法和私有属性"><a href="#私有方法和私有属性" class="headerlink" title="私有方法和私有属性"></a>私有方法和私有属性</h3><ul><li><p>在方法前加 <strong>_</strong> 可让其成为私有方法,私有属性也是如此</p></li><li><p>私有方法或私有属性所在的类必须被<strong>抽出在单独文件</strong>,可通过this关键词来调用</p></li><li><p>私有方法在实例中无法直接调用,但可以在私有方法的类里使用this关键词,方法调用私有方法的方法来间接调用私有方法</p><p>例1.1:私有方法和属性的定义</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;                                             </span><br><span class="line">    <span class="built_in">String</span> _name=<span class="string">'张三'</span>;          <span class="comment">//这是一个私有属性</span></span><br><span class="line">    <span class="built_in">int</span> age;                                           </span><br><span class="line">    getName()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._name;         <span class="comment">//定义一个方法调用私有属性,吧_name返回到getName方法,也可以return _name;</span></span><br><span class="line">    &#125;</span><br><span class="line">    _run()&#123;                      <span class="comment">//这是一个私有方法</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'这是一个私有方法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getRun()&#123;                    <span class="comment">//同样通过其他方法调用此私有方法</span></span><br><span class="line">      <span class="keyword">return</span> _run();             <span class="comment">//return this._run();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1.2:私有方法和属性的调用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/person.dart'</span>;         <span class="comment">//首先调用person类文件夹</span></span><br><span class="line">main()&#123;                           </span><br><span class="line"><span class="keyword">var</span> p1=Person();       </span><br><span class="line"><span class="built_in">print</span>(p1.getName());              <span class="comment">//调用getName方法来调用_name属性 输出: 张三</span></span><br><span class="line">p1.getRun();                      <span class="comment">//调用getRun方法来调用_run方法 输出: 这是一个私有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类中的getter和setter"><a href="#类中的getter和setter" class="headerlink" title="类中的getter和setter"></a>类中的getter和setter</h3><ul><li><p>getter可当做计算属性来用,调用时按照调用属性的方法来调用</p><p>例1.1:使用自定义类和方法来计算r的面积</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;                           <span class="comment">//自定义类</span></span><br><span class="line">  <span class="built_in">num</span> height;                         <span class="comment">//属性高</span></span><br><span class="line">  <span class="built_in">num</span> width;                          <span class="comment">//属性宽</span></span><br><span class="line">  Rect(<span class="keyword">this</span>.height,<span class="keyword">this</span>.width);       <span class="comment">//结构函数传参宽高</span></span><br><span class="line">  area()&#123;                             <span class="comment">//自定义方法,吧高*宽的值返回给方法</span></span><br><span class="line">    <span class="keyword">return</span> height*width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;               </span><br><span class="line">Rect r=Rect(<span class="number">10</span>,<span class="number">4</span>);                    <span class="comment">//实例化Rect类并传参</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'面积:<span class="subst">$&#123;r.area()&#125;</span>'</span>);             <span class="comment">//调用area方法输出面积 输出: 面积:40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1.2:使用getter来改上面的例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line">  Rect(<span class="keyword">this</span>.height,<span class="keyword">this</span>.width);</span><br><span class="line">  <span class="keyword">get</span> area&#123;                           <span class="comment">//使用了getter</span></span><br><span class="line">    <span class="keyword">return</span> height*width;          </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">Rect r=Rect(<span class="number">10</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'面积:<span class="subst">$&#123;r.area&#125;</span>'</span>);              <span class="comment">//调用时像调用属性一样不带() 输出: 面积:40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2:使用setter方法改变高度,然后用getter计算面积</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line">  Rect(<span class="keyword">this</span>.height,<span class="keyword">this</span>.width);</span><br><span class="line">  <span class="keyword">get</span> area&#123;</span><br><span class="line">    <span class="keyword">return</span> height*width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> reheight(value)&#123;                <span class="comment">//setter方法</span></span><br><span class="line">    <span class="keyword">this</span>.height=value;                <span class="comment">//可简化为 height=value;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">Rect r=Rect(<span class="number">10</span>,<span class="number">4</span>);</span><br><span class="line">r.reheight=<span class="number">6</span>;                         <span class="comment">//调用setter改变高度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'面积:<span class="subst">$&#123;r.area&#125;</span>'</span>);               <span class="comment">//输出: 面积:24</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类中的初始化列表"><a href="#类中的初始化列表" class="headerlink" title="类中的初始化列表"></a>类中的初始化列表</h3><ul><li><p>初始化列表指在实例化<strong>之前</strong>直接赋值给属性</p><p>例:初始化给长和宽数值 此值是在实例化之前赋予的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line">  Rect():height=<span class="number">10</span>,width=<span class="number">2</span>;     <span class="comment">//赋予初始化值</span></span><br><span class="line">  <span class="keyword">get</span> area&#123;</span><br><span class="line">    <span class="keyword">return</span> height*width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">Rect r=Rect();</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'面积:<span class="subst">$&#123;r.area&#125;</span>'</span>);        <span class="comment">//输出: 面积:20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;类&lt;/strong&gt;-&lt;strong&gt;自定义类 , 构造函数 , 类的抽离和调用 , 私有方法和私有属性 , 类中的getter和setter&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (五)</title>
    <link href="http://yoursite.com/2020/04/02/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>http://yoursite.com/2020/04/02/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/</id>
    <published>2020-04-02T13:05:43.000Z</published>
    <updated>2020-04-05T11:13:00.280Z</updated>
    
    <content type="html"><![CDATA[<p><strong>函数 , 自定义方法 , 方法的传参 , 可选参数和命名参数 , 给方法传入方法 , 箭头函数 , 函数的相互调用 , 匿名方法 , 自执行方法 , 方法的递归 , 全局变量和局部变量 , 闭包</strong></p><a id="more"></a><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h3><ul><li><p>Dart自带的函数为内置函数 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'print是内置函数'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义方法的基本格式 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">返回类型 方法名称 (参数<span class="number">1.</span>..)&#123;</span><br><span class="line">    方法体  </span><br><span class="line">        <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> printInfo()&#123;                  <span class="comment">//自定义方法方法名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是一个自定义方法'</span>);     <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义方法可以在入口方法之外定义,也可以在入口以内定义,但调用必须在入口以内调用</p></li><li><p>一个方法可以嵌套另外一个方法</p><p>例1:在入口方法内调用自定义函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是一个自定义方法'</span>);</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    printInfo();</span><br><span class="line">&#125;                                  <span class="comment">//输出: 我是一个自定义方法</span></span><br></pre></td></tr></table></figure><p>例2:吧指定类型的myNum返回到getNum方法并打印输出</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line"><span class="built_in">int</span> getNum()&#123;                  <span class="comment">//指定返回类型为int类型,非int类型会报错,返回类型也可以是List,String</span></span><br><span class="line">    <span class="keyword">var</span> myNum=<span class="number">123</span>;             <span class="comment">//定义myNum=123</span></span><br><span class="line">    <span class="keyword">return</span> myNum;              <span class="comment">//吧myNum的值返回给getNum</span></span><br><span class="line">&#125;    </span><br><span class="line">    <span class="keyword">var</span> n=getNum();            <span class="comment">//吧getNum方法赋值给n</span></span><br><span class="line">    <span class="built_in">print</span>(n);                  <span class="comment">//打印n输出: 123</span></span><br><span class="line">    <span class="built_in">print</span>(getNum());           <span class="comment">//因为吧myNum的值返回给了getNum所以也可以直接打印getNum 输出: 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例3:返回值固定为String</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> tast()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'你好'</span>;          </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(tast());</span><br></pre></td></tr></table></figure></li><li><p>以上举例中的方法全都为<strong>‘<u>全作用域</u>‘</strong>,可以在入口方法内使用</p></li><li><p>如果是在’<strong><u>①自定义方法中自定义的②方法</u></strong>‘则为<strong><u>‘局部作用域’</u></strong>,仅可在①(本自定义方法的上层自定义方法)中使用</p><p>例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> xxx()&#123;</span><br><span class="line">    aaa()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'这是一个局部作用域方法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法的传参"><a href="#方法的传参" class="headerlink" title="方法的传参"></a>方法的传参</h3><ul><li><p><strong>形参</strong>:出现在函数定义中，在整个函数体内都可以使用， 离开该函数则不能使用</p><ul><li>形参可以有多个,形参可以固定类型</li></ul></li><li><p><strong>实参</strong>:出现在主调函数中，进入被调函数后，实参变量也不能使用</p></li><li><p>形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量</p></li><li><p>实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。因此应预先用赋值，输入等办法使参数获得确定值</p></li><li><p>例1:定义一个方法,求1到n的所有数的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> myNum(<span class="built_in">int</span> n)&#123;               <span class="comment">//形参n,返回类型为int</span></span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n=myNum(<span class="number">100</span>);                <span class="comment">//100为实参,给方法myNum的形参n传入参数100,赋值给n</span></span><br><span class="line"><span class="built_in">print</span>(n);                        <span class="comment">//输出: 5050</span></span><br><span class="line"><span class="built_in">print</span>(myNum(<span class="number">60</span>));                <span class="comment">//给方法myNum的形参n传入实参60并打印输出: 1830</span></span><br></pre></td></tr></table></figure><p>例2:定义一个方法,打印用户信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user,<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>-----年龄:<span class="subst">$age</span>'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p=printUserInfo(<span class="string">'老念'</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">print</span>(p);</span><br></pre></td></tr></table></figure></li></ul><h3 id="可选参数和命名参数"><a href="#可选参数和命名参数" class="headerlink" title="可选参数和命名参数"></a>可选参数和命名参数</h3><ul><li><p>使用[ ]定义可选参数,可选参数放在参数的最后,用<strong>逗,号</strong>分隔</p></li><li><p>一般参数是在调用时必须传入实参,可选参数为可填可不填</p></li><li><p>可以有多个可选参数</p></li><li><p>传入实参时必须按照定义参数的顺序填写</p><p>例1:定义一个可选参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user,<span class="built_in">int</span> age,[<span class="built_in">String</span> sex])&#123;     <span class="comment">//可选参数sex</span></span><br><span class="line">    <span class="keyword">if</span>(sex!=<span class="keyword">null</span>)&#123;                                          <span class="comment">//如果sex不等于null,则执行下面的内容null:不存在,空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>----年龄:<span class="subst">$age</span>----性别:<span class="subst">$sex</span>'</span>;               </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                                                  <span class="comment">//否则执行下面内容,就是如果可选参数sex是空的,则在下面输出时候打印出 性别保密</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>----年龄:<span class="subst">$age</span>----性别保密'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p=printUserInfo(<span class="string">'老念'</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> f=printUserInfo(<span class="string">'张三'</span>,<span class="number">35</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="built_in">print</span>(p);                                                   <span class="comment">//输出: 姓名:老念----年龄:25----性别保密</span></span><br><span class="line"><span class="built_in">print</span>(f);                                                   <span class="comment">//输出: 姓名:张三----年龄:35----性别:男</span></span><br></pre></td></tr></table></figure><p>例2:定义一个带默认参数的可选参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user,[<span class="built_in">String</span> sex=<span class="string">'男'</span>,<span class="built_in">int</span> age])   </span><br><span class="line"><span class="comment">//如果没有赋予sex实参,则默认为'男',如果赋予了参数,则将覆盖默认参数</span></span><br></pre></td></tr></table></figure><p>例3:定义一个命名参数{ }</p><ul><li>命名参数同时也是可选参数也可以指定默认参数</li><li>命名参数可有多个</li><li>命名参数在传参时只要带上名字,可以不按定义参数的顺序填写,所以如果需要多个可选参数的情况下最好使用命名参数的方式定义</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> user, &#123;<span class="built_in">int</span> age, <span class="built_in">String</span> sex = <span class="string">'男'</span>&#125;) &#123;   <span class="comment">//使用大括号定义一个命名参数age,和一个带默认参数的命名参数sex</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'姓名:<span class="subst">$user</span>---年龄:<span class="subst">$age</span>---性别:<span class="subst">$sex</span>'</span>;         </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = printUserInfo(<span class="string">'张三'</span>, sex: <span class="string">'女'</span>);                           <span class="comment">//命名参数必须带上名字比如sex:'女',</span></span><br><span class="line"><span class="keyword">var</span> f = printUserInfo(<span class="string">'张三'</span>, age: <span class="number">20</span>);                             <span class="comment">//命名参数可不按定义顺序传入,同时默认参数也会生效</span></span><br><span class="line"><span class="built_in">print</span>(p);                                                          <span class="comment">//输出: 姓名:张三---年龄:null---性别:女</span></span><br><span class="line"><span class="built_in">print</span>(f);                                                          <span class="comment">//输出: 姓名:张三---年龄:20---性别:男</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="给方法传入方法"><a href="#给方法传入方法" class="headerlink" title="给方法传入方法"></a>给方法传入方法</h3><ul><li><p>如何实现一个把方法当做参数的方法 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn1()&#123;                    <span class="comment">//自定义方法fn1,方法体为输出fn1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'fn1'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn2(fn)&#123;                  <span class="comment">//自定义方法fn2,方法体为运行形参处传入的实参方法</span></span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line">fn2(fn1);                 <span class="comment">//调用fn2传入实参fn1就会执行fn1方法体输出: fn1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li><p>箭头函数只能写一行,箭头函数不能写多句话</p></li><li><p>箭头函数一定要带箭头=&gt;,箭头函数可以使用三目运算的方法写</p><p>例1:使用forEach循环遍历list,然后简化为箭头函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach((value)&#123;</span><br><span class="line">  <span class="built_in">print</span>(value);</span><br><span class="line">&#125;);                                     <span class="comment">//输出: 1 2 3</span></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach((value)=&gt;<span class="built_in">print</span>(value));    <span class="comment">//简化为箭头函数,输出: 1 2 3</span></span><br></pre></td></tr></table></figure><p>例2:修改数组中的数据,让数组中大于2的数值乘以2,然后简化为箭头函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newlist=list.map((value)&#123;</span><br><span class="line">  <span class="keyword">if</span>(value&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newlist.toList());                <span class="comment">//输出: [1, 2, 6, 8, 10]                </span></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="built_in">List</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newlist=list.map((value)=&gt;value&gt;<span class="number">2</span>?value*<span class="number">2</span>:value);</span><br><span class="line"><span class="built_in">print</span>(newlist.toList());                <span class="comment">//输出: [1, 2, 6, 8, 10]</span></span><br><span class="line"><span class="comment">//因为箭头函数只能写一行所以使用三目运算,=&gt;为箭头函数,三目运算中?为if,:为else</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的相互调用"><a href="#函数的相互调用" class="headerlink" title="函数的相互调用"></a>函数的相互调用</h3><ul><li><p>函数之间的调用例如:</p><p>例:自定义方法aNum来判断一个数是否为偶数,自定义方法bNum,在自定义方法bNum中调用自定义方法aNum来打印1~n之间所有偶数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> aNum(<span class="built_in">int</span> n)&#123;                <span class="comment">//bool类型自定义方法,形参为int n,</span></span><br><span class="line">  <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;                    <span class="comment">//如果n是偶数则返回true给aNum</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">  &#125;                              <span class="comment">//else可以不写,也不用写大括号</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;                  <span class="comment">//否则返回false</span></span><br><span class="line">&#125;</span><br><span class="line">bNum(<span class="built_in">int</span> n)&#123;                     <span class="comment">//自定义方法bNum,形参为int n</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;         <span class="comment">//for循环</span></span><br><span class="line">    <span class="keyword">if</span>(aNum(i))&#123;                 <span class="comment">//调用aNum吧i当做形参填入,判断i是否为偶数</span></span><br><span class="line">      <span class="built_in">print</span>(i);                  <span class="comment">//如果是偶数,打印i,否则跳过</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bNum(<span class="number">10</span>);                         <span class="comment">//bNum(10)实参为10,则for循环中的n就是10 输出: 2 4 6 8 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h3><ul><li><p>匿名方法就是没有方法名称的方法</p></li><li><p>匿名方法的传参使用和一般方法一样</p><p>例1:匿名方法定义方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printNum=()&#123;        <span class="comment">//这是一个匿名方法被赋值给了printNum</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>);</span><br><span class="line">&#125;;</span><br><span class="line">printNum();             <span class="comment">//调用printNum方法可以 输出: 123</span></span><br></pre></td></tr></table></figure><p>例2:匿名方法的传参</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printNum=(<span class="built_in">int</span> n)&#123;</span><br><span class="line">    <span class="built_in">print</span>(n*<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">printNum(<span class="number">5</span>);             <span class="comment">//输出: 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自执行方法"><a href="#自执行方法" class="headerlink" title="自执行方法"></a>自执行方法</h3><ul><li><p>自执行方法<strong>((){})()</strong>:指不需要调用也会自动执行的方法</p></li><li><p>自执行方法也可以传入参数</p><p>例1:自执行方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'这是一个自执行方法'</span>);</span><br><span class="line">&#125;)();                     <span class="comment">//输出: 这是一个自执行方法</span></span><br></pre></td></tr></table></figure><p>例2:给自执行方法传入参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((<span class="built_in">int</span> n)&#123;</span><br><span class="line">  <span class="built_in">print</span>(n);</span><br><span class="line">&#125;)(<span class="number">12</span>);                   <span class="comment">//输出: 12</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h3><ul><li><p>递归其实是方法自己调用自己</p></li><li><p>在递归中遇到return停止执行</p><p>例1:使用递归达成1~5的阶乘  1*2 * 3 *4 *5</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">1</span>;</span><br><span class="line">fn(n)&#123;        </span><br><span class="line">  sum*=n;               <span class="comment">//sum=sum*n</span></span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;             <span class="comment">//如果n=1则停止执行</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fn(n<span class="number">-1</span>);              <span class="comment">//否则n-1继续执行</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">5</span>);                  <span class="comment">//fn传入参数5</span></span><br><span class="line"><span class="built_in">print</span>(sum);             <span class="comment">//输出: 120</span></span><br></pre></td></tr></table></figure><p>例2:求1~100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">fn(n)&#123;</span><br><span class="line">  sum+=n;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fn(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(sum);             <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><ul><li><p><strong>全局变量</strong>: 全局变量<strong>作用域大</strong>,<strong>常驻内存</strong>,<strong>污染全局</strong></p><p>例:全局变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;              <span class="comment">//全局变量,全局作用域</span></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(a);           <span class="comment">//输出: 1</span></span><br><span class="line">  fn()&#123;               <span class="comment">//自定义方法fn</span></span><br><span class="line">    a++;              <span class="comment">//方法体是a++然后打印出a</span></span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();               <span class="comment">//因a全局作用域,所以常驻内存污染全局因此a=1的情况下a++=2 输出: 2</span></span><br><span class="line">  fn();               <span class="comment">//因a全局作用域,所以常驻内存污染全局因此a=2的情况下a++=3 输出: 3</span></span><br><span class="line">&#125;                     <span class="comment">//如果继续调用fn,那么会持续向下加</span></span><br></pre></td></tr></table></figure></li><li><p><strong>局部变量</strong>: <strong>作用域小</strong>,<strong>不会常驻内存</strong>,<strong>会被垃圾回收机制回收</strong>,<strong>不会污染全局</strong></p><p>例:局部变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">printInfo()&#123;           <span class="comment">//自定义方法</span></span><br><span class="line">  <span class="keyword">var</span> myNum=<span class="number">1</span>;         <span class="comment">//自定义方法中的局部变量</span></span><br><span class="line">  myNum++;             <span class="comment">//自增</span></span><br><span class="line">  <span class="built_in">print</span>(myNum);        <span class="comment">//调用方法时打印出自增后的myNum</span></span><br><span class="line">&#125;</span><br><span class="line">printInfo();           <span class="comment">//调用该方法,自增后值为2 输出: 2</span></span><br><span class="line">printInfo();           <span class="comment">//因为是局部变量,没有常驻内存,每次的值都会被垃圾回收机制回收,所以值依旧是1自增为2 输出: 2</span></span><br><span class="line"><span class="built_in">print</span>(myNum);          <span class="comment">//因为是局部变量,作用域小,所以在自定义方法外调用自定义方法中的属性是无法调用的 错误写法X</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h4><ul><li><p><strong>闭包</strong>是一种在全局变量和局部变量之间<strong>取舍</strong>的写法,闭包<strong>常驻内存</strong>并且<strong>不会污染全局</strong></p></li><li><p>闭包:函数嵌套函数,内部函数会调用外部函数的变量或参数,不会被系统回收</p></li><li><p>闭包写法:函数嵌套函数并return里面的函数</p><p>例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">fn()&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span>()&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=fn();</span><br><span class="line">b();                <span class="comment">//输出: 2</span></span><br><span class="line">b();                <span class="comment">//输出: 3</span></span><br><span class="line">b();                <span class="comment">//输出: 4 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;函数 , 自定义方法 , 方法的传参 , 可选参数和命名参数 , 给方法传入方法 , 箭头函数 , 函数的相互调用 , 匿名方法 , 自执行方法 , 方法的递归 , 全局变量和局部变量 , 闭包&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (四)</title>
    <link href="http://yoursite.com/2020/03/29/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>http://yoursite.com/2020/03/29/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/</id>
    <published>2020-03-29T08:00:31.000Z</published>
    <updated>2020-04-02T13:41:43.631Z</updated>
    
    <content type="html"><![CDATA[<p><strong>List常用属性和方法 , Set</strong> , <strong>Map(字典,映射)的常用方法和属性 , 常用循环遍历方法 , 使用循环语句修改list内容where , any , map , every</strong></p><a id="more"></a><h3 id="List常用属性和方法"><a href="#List常用属性和方法" class="headerlink" title="List常用属性和方法"></a>List常用属性和方法</h3><ul><li><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li><strong>length</strong>(长度) , <strong>reversed</strong>(反转) , <strong>isEmpty</strong>(为空) , <strong>isNotEmpty</strong>(不为空)</li></ul></li><li><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>add</strong>(增加) , <strong>addAll</strong>(拼接数组) , <strong>indexOf</strong>(查找,传入具体值) , <strong>remove</strong>(删除,传入具体值) , <strong>removeAt</strong>(删除,传入索引值) , <strong>fillRange</strong>(修改) ,  <strong>insert(index,value)</strong>(指定位置插入) , <strong>toList()</strong>(其他类型转换为List)     , <strong>insertAll(index,list)</strong>(指定位置插入List) , <strong>Join()</strong>(List转换为字符串) , <strong>split()</strong>(字符串转换为List)  ,   <strong>forEach   ,  map   ,  where   ,  any    ,  every</strong></li></ul><p>例1:常用属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line"><span class="built_in">print</span>(myList.length);                    <span class="comment">//输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(myList.isEmpty);                   <span class="comment">//输出: false</span></span><br><span class="line"><span class="built_in">print</span>(myList.isNotEmpty);                <span class="comment">//输出: true</span></span><br><span class="line"><span class="built_in">print</span>(myList.reversed);                  <span class="comment">//输出: (小,中,大) 经过反转后并不是list类型</span></span><br><span class="line"><span class="keyword">var</span> newList=myList.reversed.toList();</span><br><span class="line"><span class="built_in">print</span>(newList);                          <span class="comment">//输出: [小,中,大] 使用toList转换为list类型</span></span><br></pre></td></tr></table></figure><p>例2:常用方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">add</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">  myList.add(<span class="string">'特大'</span>);                    <span class="comment">//add方法增加数组内容,但一次只能添加一个</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                       <span class="comment">//输出: [大, 中, 小, 特大]</span></span><br><span class="line">addAll</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">    myList.addAll([<span class="string">'特大'</span>,<span class="string">'特特大'</span>]);    <span class="comment">//addAll可以看做是数组拼接,吧括号中的数组和原数组进行拼接</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//输出: [大, 中, 小, 特大,特特大]</span></span><br><span class="line">indexOf</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">    <span class="keyword">var</span> a=myList.indexOf(<span class="string">'小'</span>);         <span class="comment">//传入想要查询的具体内容,如果该数组中有则返回索引值,没有的话返回-1</span></span><br><span class="line">    <span class="built_in">print</span>(a);                           <span class="comment">//输出: 2   这是小在数组中的索引值</span></span><br><span class="line">remove</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];       </span><br><span class="line">    myList.remove(<span class="string">'小'</span>);                <span class="comment">//传入想要删除的具体内容</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//小被删除了所以输出: [大,中]</span></span><br><span class="line">removeAt</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];       </span><br><span class="line">    myList.removeAt(<span class="number">2</span>);                 <span class="comment">//传入想要删除的索引值,小的索引值是012里的2</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//小被删除了所以输出: [大,中]</span></span><br><span class="line">fillRange</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];        </span><br><span class="line">    myList.fillRange(<span class="number">2</span>,<span class="number">3</span>,<span class="string">'超小'</span>);       <span class="comment">//传入起始位置和结束位置的索引值,然后传入要修改的内容,索引值位置模板[0'大'1'中'2'小'3]  (start,end,value)</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//经过修改 输出: [大, 中, 超小]</span></span><br><span class="line">   </span><br><span class="line">    myList.fillRange(<span class="number">1</span>,<span class="number">3</span>,<span class="string">'超小'</span>);       <span class="comment">//也可以一次性修改多项</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//输出: [大,超小,超小]</span></span><br><span class="line">insert</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];    </span><br><span class="line">    myList.insert(<span class="number">3</span>, <span class="string">'超小'</span>);           <span class="comment">//填写要插入的位置 和 要插入的内容[0'大'1'中'2'小'3]</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                      <span class="comment">//输出: [大, 中, 小, 超小] insert只能插入一个内容</span></span><br><span class="line">insertAll</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];   </span><br><span class="line">    myList.insertAll(<span class="number">1</span>, [<span class="string">'特大'</span>,<span class="string">'特小'</span>]);   <span class="comment">//可插入数组(多个内容)</span></span><br><span class="line">    <span class="built_in">print</span>(myList);                         <span class="comment">//输出: [大, 特大, 特小, 中, 小]</span></span><br><span class="line">Join</span><br><span class="line">    <span class="built_in">List</span> myList=[<span class="string">'大'</span>,<span class="string">'中'</span>,<span class="string">'小'</span>];</span><br><span class="line">    <span class="keyword">var</span> a=myList.join(<span class="string">' '</span>);              <span class="comment">//Join方法可把数组转换为字符串 ('引号')中传入如何间隔 </span></span><br><span class="line">    <span class="keyword">var</span> b=myList.join(<span class="string">'-'</span>);              <span class="comment">//可以传入空格也可以使用,- 等等</span></span><br><span class="line">    <span class="built_in">print</span>(a);                            <span class="comment">//输出: 大 中 小</span></span><br><span class="line">    <span class="built_in">print</span>(b);                            <span class="comment">//输出: 大-中-小</span></span><br><span class="line">split</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">'苹果-香蕉-桃子'</span>;              <span class="comment">//字符串 如果是str='苹果,香蕉,桃子'则split传入','</span></span><br><span class="line">    <span class="keyword">var</span> list=str.split(<span class="string">'-'</span>);              <span class="comment">//用split方法 以-为分隔符来切割内容组成数组</span></span><br><span class="line">    <span class="built_in">print</span>(list);                          <span class="comment">//输出: [苹果, 香蕉, 桃子]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li><p>用它的主要功能就是去除数组重复内容</p></li><li><p>Set是没有顺序且不能重复的集合,所以不能通过索引去获取值</p><p>例: Set的使用方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span> a=&#123;<span class="string">'aaa'</span>,<span class="string">'bbb'</span>,<span class="string">'aaa'</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(a);                   <span class="comment">//输出: &#123;aaa, bbb&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">'张三'</span>);</span><br><span class="line">s.add(<span class="string">'李四'</span>);</span><br><span class="line">s.add(<span class="string">'李四'</span>);</span><br><span class="line"><span class="built_in">print</span>(s);                   <span class="comment">//输出: &#123;张三, 李四&#125;           </span></span><br><span class="line"><span class="built_in">print</span>(s.toList());          <span class="comment">//输出: [张三, 李四]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l=<span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">l.add(<span class="string">'张三'</span>);</span><br><span class="line">l.add(<span class="string">'李四'</span>);</span><br><span class="line">l.add(<span class="string">'李四'</span>);</span><br><span class="line"><span class="built_in">print</span>(l);                   <span class="comment">//输出: [张三, 李四, 李四]</span></span><br><span class="line"><span class="built_in">print</span>(l.toSet());           <span class="comment">//输出: &#123;张三, 李四&#125;</span></span><br><span class="line"><span class="built_in">print</span>(l.toSet().toList());  <span class="comment">//输出: [张三, 李四]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> list=[<span class="string">'苹果'</span>,<span class="string">'香蕉'</span>,<span class="string">'西瓜'</span>,<span class="string">'西瓜'</span>,<span class="string">'香蕉'</span>,<span class="string">'西瓜'</span>];</span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.addAll(list);             <span class="comment">//必须使用addAll,不然会被看做为一个整体数组</span></span><br><span class="line"><span class="built_in">print</span>(s);                   <span class="comment">//输出: &#123;苹果, 香蕉, 西瓜&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s.toList());          <span class="comment">//输出: [苹果, 香蕉, 西瓜]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Map-字典-映射-的常用方法和属性"><a href="#Map-字典-映射-的常用方法和属性" class="headerlink" title="Map(字典,映射)的常用方法和属性"></a>Map(字典,映射)的常用方法和属性</h3><ul><li><h4 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li><strong>keys</strong>(获取所有key值)    ,    <strong>values</strong>(获取所有value值)   ,     <strong>isEmpty</strong>(是否为空)   ,     <strong>isNotEmpty</strong>(是否不为空)     </li></ul></li><li><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>remove</strong>(key) :                       删除指定key的数据</li><li><strong>addAll</strong>({…}) :                         合并映射,给映射内增加属性</li><li><strong>containsValue(value)</strong> :    查看映射内的值,返回true/false</li><li><strong>map  ,  forEach   ,  where   ,   any ,    every</strong></li></ul><p>例1:常用属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span> person=&#123;</span><br><span class="line">  <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">  <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">  <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(person);                        <span class="comment">//输出: &#123;name: 老念, age: 25, sex: 男&#125;</span></span><br><span class="line"><span class="built_in">print</span>(person.keys);                   <span class="comment">//输出: (name, age, sex)</span></span><br><span class="line"><span class="built_in">print</span>(person.keys.toList());          <span class="comment">//输出: [name, age, sex]</span></span><br><span class="line"><span class="built_in">print</span>(person.values.toList());        <span class="comment">//输出: [老念, 25, 男]</span></span><br><span class="line"><span class="built_in">print</span>(person.isEmpty);                <span class="comment">//输出: false</span></span><br><span class="line"><span class="built_in">print</span>(person.isNotEmpty);             <span class="comment">//输出: true</span></span><br></pre></td></tr></table></figure><p>例2:常用方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">remove(key)</span><br><span class="line">    <span class="built_in">Map</span> person=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">    <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    person.remove(<span class="string">'sex'</span>);</span><br><span class="line">    <span class="built_in">print</span>(person);                          <span class="comment">//输出: &#123;name: 老念, age: 25&#125;</span></span><br><span class="line">addAll</span><br><span class="line">    <span class="built_in">Map</span> person=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">    <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    person.addAll(&#123;<span class="string">'work'</span>:[<span class="string">'送外卖'</span>,<span class="string">'敲代码'</span>],<span class="string">'height'</span>:<span class="number">165</span>&#125;);</span><br><span class="line">    <span class="built_in">print</span>(person);                          <span class="comment">//输出: &#123;name: 老念, age: 25, sex: 男, work: [送外卖, 敲代码], height: 165&#125;</span></span><br><span class="line">containsValue</span><br><span class="line">    <span class="built_in">Map</span> person=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'老念'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">25</span>,</span><br><span class="line">    <span class="string">'sex'</span>:<span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">print</span>(person.containsValue(<span class="string">'老念'</span>));     <span class="comment">//输出: true   containsKey(key)使用方法相同</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用循环语句循环遍历"><a href="#常用循环语句循环遍历" class="headerlink" title="常用循环语句循环遍历"></a>常用循环语句循环遍历</h3><ul><li><p>使用循环语句循环遍历打印所有内容有许多方法常用如下</p><ul><li><strong>for循环</strong>  ,    <strong>for…in</strong>    ,    <strong>forEach</strong>              </li></ul></li><li><p>例1:使用for循环循环遍历</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'老念'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">  <span class="built_in">print</span>(list[i]);</span><br><span class="line">&#125;                                          <span class="comment">//输出: 张三  李四   王五   老念</span></span><br></pre></td></tr></table></figure></li><li><p>例2:使用for…in循环遍历</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'老念'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> itme <span class="keyword">in</span> list)&#123;</span><br><span class="line">  <span class="built_in">print</span>(itme);</span><br><span class="line">&#125;                                          <span class="comment">//输出: 张三  李四   王五   老念</span></span><br></pre></td></tr></table></figure></li><li><p>例3:使用forEach循环遍历</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'老念'</span>];</span><br><span class="line">list.forEach((value)&#123;                      <span class="comment">//forEach((key,value)&#123;&#125;)因为list只有一个内容所以只填写一个</span></span><br><span class="line">  <span class="built_in">print</span>(value);</span><br><span class="line">&#125;);                                        <span class="comment">//输出: 张三  李四   王五   老念</span></span><br></pre></td></tr></table></figure><h4 id="使用循环语句修改list内容"><a href="#使用循环语句修改list内容" class="headerlink" title="使用循环语句修改list内容"></a>使用循环语句修改list内容</h4></li><li><p><strong>map   ,    where  ,    any    ,  every</strong></p><ul><li>map:循环遍历修改数据</li><li>where:条件判断,满足条件的返回为一个新的集合</li><li>any:条件判断有满足条件的则返回true,没有则返回false</li><li>every:条件判断,所有数据都满足条件则返回true,有一个没有满足条件就返回false</li></ul></li><li><p>例1:使用for循环修改内容,给list每个数据X2并返回一个新的数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newList=<span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myList.length;i++)&#123;</span><br><span class="line">  newList.add(myList[i]*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(newList);                           <span class="comment">//输出: [2, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><p>例2:使用map方法修改内容,给list每个数据X2并返回一个新的数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];                      </span><br><span class="line"><span class="keyword">var</span> newList=myList.map((value)&#123;           <span class="comment">//虽然forEach也可以做到但是据说很可能会出问题所以一般用map方法</span></span><br><span class="line">  <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newList);                           <span class="comment">//输出: (2, 6, 8, 10)                </span></span><br><span class="line"><span class="built_in">print</span>(newList.toList());                  <span class="comment">//输出: [2, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><p>例3:使用where,将满足条件的数据组成一个新的数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newList=myList.where((value)&#123;</span><br><span class="line">  <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newList.toList());                  <span class="comment">//输出: [4,5]</span></span><br></pre></td></tr></table></figure></li><li><p>例4:使用any判断该数组是否有大于3的数据</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> f=myList.any((value)&#123;</span><br><span class="line">  <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(f);                                  <span class="comment">//输出: true</span></span><br></pre></td></tr></table></figure></li><li><p>例5:使用every判断该数组是否<strong>所有</strong>数据都大于3</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> f=myList.every((value)&#123;</span><br><span class="line">  <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(f);                                  <span class="comment">//输出: false</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;List常用属性和方法 , Set&lt;/strong&gt; , &lt;strong&gt;Map(字典,映射)的常用方法和属性 , 常用循环遍历方法 , 使用循环语句修改list内容where , any , map , every&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (三)</title>
    <link href="http://yoursite.com/2020/03/27/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://yoursite.com/2020/03/27/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/</id>
    <published>2020-03-27T11:05:23.000Z</published>
    <updated>2020-04-02T13:34:31.653Z</updated>
    
    <content type="html"><![CDATA[<p><strong>String和Num的类型转换 , ++–自增自减 , for循环基础语法 , 二维List和Map和二维for循环 , 循环语句while和do…while , break语句和continue语句的功能</strong> </p><a id="more"></a><h3 id="Number和String类型之间的转换"><a href="#Number和String类型之间的转换" class="headerlink" title="Number和String类型之间的转换"></a>Number和String类型之间的转换</h3><ul><li><p>Number类型转换为String类型使用  toString()方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">12</span>;               <span class="comment">//定义a=12 数值类型</span></span><br><span class="line"><span class="keyword">var</span> str=a.toString();   <span class="comment">//使用toString方法</span></span><br><span class="line"><span class="built_in">print</span>(str <span class="keyword">is</span> <span class="built_in">String</span>);   <span class="comment">//用is判断str是不是String类型 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p>String类型转换为Number类型使用  parse()方法</p><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str=<span class="string">'123'</span>;           <span class="comment">// '123'是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="built_in">double</span>.parse(str);    <span class="comment">//parse的使用方式   double int 都可以使用</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="built_in">double</span>);         <span class="comment">//输出: true</span></span><br></pre></td></tr></table></figure><ul><li><p>如果String转Namber时,因str=’  ‘空而报错,可食用try….catch 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> price=<span class="string">' '</span>;                <span class="comment">//可能是空格 空 其他非数字内容  price(价格)</span></span><br><span class="line"><span class="keyword">try</span>&#123;                             <span class="comment">//如果有数据就执行转换,错误数据就执行catch </span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="built_in">double</span>.parse(price);</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="built_in">print</span>(a <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>);                     <span class="comment">//输出: 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以使用if..else和isEmpty(为空)或者NotisEmpty(不为空)方法 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(price.isEmpty)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="keyword">if</span>(price.NotisEmpty)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><ul><li><p>++(自增) , –(自减)</p></li><li><p>在赋值运算中,如果++–写在前面,这时会先运算,再赋值.如果++–写在后面则先赋值,后运算</p><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;   </span><br><span class="line"><span class="keyword">var</span> b=a++;   <span class="comment">//++写在后面所以是先赋值再运算  </span></span><br><span class="line"><span class="built_in">print</span>(a);    <span class="comment">//后运算 输出: 11</span></span><br><span class="line"><span class="built_in">print</span>(b);    <span class="comment">//先赋值 输出: 10</span></span><br></pre></td></tr></table></figure><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;   </span><br><span class="line"><span class="keyword">var</span> b=--a;   <span class="comment">//--写在前面所以是先运算再赋值</span></span><br><span class="line"><span class="built_in">print</span>(a);    <span class="comment">//先运算 输出: 9</span></span><br><span class="line"><span class="built_in">print</span>(b);    <span class="comment">//后赋值 输出: 9</span></span><br></pre></td></tr></table></figure></li><li><p>不是赋值运算的情况下++ , –写在前面后面效果一样</p></li></ul><h3 id="For循环的基本语法"><a href="#For循环的基本语法" class="headerlink" title="For循环的基本语法"></a>For循环的基本语法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;       <span class="comment">//1.声明变量int i=1; 2.判断i&lt;=100; 3.print(i); 4.i++; 5.从第二步继续开始循环,直到判断为false.</span></span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">&#125;                              <span class="comment">//输出: 123456~~~直到100;   因为100之后i++ 101 第二步判断为false 所以跳出循环</span></span><br></pre></td></tr></table></figure><ul><li><p>例1:打印出0-50的偶数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;=<span class="number">50</span>;a++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">0</span>)&#123;             <span class="comment">//在for循环中嵌套if判断语句,判断条件为a取整2==0则输出a,否则 就是 不是偶数的 跳过</span></span><br><span class="line">        <span class="built_in">print</span>(a);</span><br><span class="line">    &#125;                       <span class="comment">//所以没写else</span></span><br><span class="line">&#125;                           <span class="comment">//输出: 0 2 4 6....50;</span></span><br></pre></td></tr></table></figure></li><li><p>例2:求1+2+3….+100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">0</span>;                    <span class="comment">//从1开始加所以b=0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">0</span>;a&lt;=<span class="number">100</span>;a++)&#123;</span><br><span class="line">    b+=a;                   <span class="comment">//b=b+a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(b);                   <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure></li><li><p>例3:求5的阶乘</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;                    <span class="comment">//0x1=0所以b=1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">    b*=a;                   <span class="comment">//b=b*a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(b);                   <span class="comment">//输出: 120</span></span><br></pre></td></tr></table></figure></li><li><p>例4:打印List数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> a=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>];         <span class="comment">//定义数组a</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> b=<span class="number">0</span>;b&lt;a.length;b++)&#123;          <span class="comment">//a.length是使用了length属性 是指list的长度 a数组长度为3但编号是从0开始所以是0 1 2,所以用b&lt;a.length 因为没有编号3</span></span><br><span class="line">    <span class="built_in">print</span>(a[b]);                      <span class="comment">//输出: 张三 李四 王五</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例5:打印数组中的Map树形</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> a=[&#123;<span class="string">'name'</span>:<span class="string">'熊大'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'熊二'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'熊三'</span>&#125;];      <span class="comment">//定义数组a中有三个map</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> b=<span class="number">0</span>;b&lt;a.length;b++)&#123;                                  <span class="comment">//for循环打印出数组中每个map中的name的value</span></span><br><span class="line">    <span class="built_in">print</span>(a[b][<span class="string">'name'</span>]);                                      <span class="comment">//输出: 熊大 熊二 熊三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="二维List和Map和二维for循环"><a href="#二维List和Map和二维for循环" class="headerlink" title="二维List和Map和二维for循环"></a>二维List和Map和二维for循环</h4><p>例6:用二维for循环打印list中嵌套的map中的list</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">List</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'目录'</span>: <span class="string">'游戏'</span>,</span><br><span class="line">      <span class="string">'内容'</span>: [</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Steam'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Origin'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Uplay'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'目录'</span>: <span class="string">'工作'</span>,</span><br><span class="line">      <span class="string">'内容'</span>: [</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Java'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Dart'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'名称'</span>: <span class="string">'Python'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> a = <span class="number">0</span>; a &lt; list.length; a++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'----------------------------------------'</span>);</span><br><span class="line">    <span class="built_in">print</span>(list[a][<span class="string">'目录'</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> b = <span class="number">0</span>; b &lt; list[a][<span class="string">'内容'</span>].length; b++) &#123;</span><br><span class="line">      <span class="built_in">print</span>(list[a][<span class="string">'内容'</span>][b][<span class="string">'名称'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line">----------------------------------------</span><br><span class="line">游戏</span><br><span class="line">Steam</span><br><span class="line">Origin</span><br><span class="line">Uplay</span><br><span class="line">----------------------------------------</span><br><span class="line">工作</span><br><span class="line">Java</span><br><span class="line">Dart</span><br><span class="line">Python</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环语句while和do…while"><a href="#循环语句while和do…while" class="headerlink" title="循环语句while和do…while"></a>循环语句while和do…while</h3><ul><li><p>while和do…while之间的区别: while在第一次循环条件不成立的情况下,什么都不会打印;do…while因为会先执行一次再判断,所以会打印第一次 例如:</p><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;<span class="number">2</span>)&#123;                 <span class="comment">//a大于2 所以不执行内容  输出应为'空'</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'你好'</span>);</span><br><span class="line">&#125;                           <span class="comment">//输出: '空'</span></span><br></pre></td></tr></table></figure></li><li><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'你好'</span>);            <span class="comment">//do..while的情况下会先执行此 打印出你好</span></span><br><span class="line">&#125;<span class="keyword">while</span>(a&lt;<span class="number">2</span>);                  <span class="comment">//然后判断 a大于2 停止循环 但第一遍已经输出: 你好</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意</strong>:1.do..while最后需要填分号 2.循环条件中使用的变量需要经过初始化 3.循环体中应有<strong>结束循环</strong>的条件,不然就成了死循环 例如:</p><p>例1: while打印1~10</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    a++;</span><br><span class="line">&#125;              <span class="comment">//输出: 1234...10</span></span><br></pre></td></tr></table></figure><p>例2:while求1~100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    b+=a;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(b);      <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure><p>例3:do…while求1~100的和</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    b+=a;</span><br><span class="line">    a++;</span><br><span class="line">&#125;<span class="keyword">while</span>(a&lt;=<span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(b);     <span class="comment">//输出: 5050</span></span><br></pre></td></tr></table></figure><p>例4:死循环 错误写法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;             <span class="comment">//死循环,会不停输出111111因为没有满足结束条件</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="break语句和continue语句的功能"><a href="#break语句和continue语句的功能" class="headerlink" title="break语句和continue语句的功能"></a>break语句和continue语句的功能</h3><ul><li><h4 id="break语句功能-在switch中跳出switch结构"><a href="#break语句功能-在switch中跳出switch结构" class="headerlink" title="break语句功能:在switch中跳出switch结构"></a>break语句功能:在switch中跳出switch结构</h4><ul><li><p>在循环语句中使流程跳出当前循环,遇到break循环终止,后面的代码也不会执行</p></li><li><p>如果循环中已经执行了break语句,就不会执行循环体中break之后的语句</p></li><li><p>多层循环中,一个break语句只能向外跳出一层</p></li><li><p>break可以用在switch…case中,也可以用在for循环和while循环中</p></li></ul></li><li><h4 id="continue语句功能-跳过当前循环"><a href="#continue语句功能-跳过当前循环" class="headerlink" title="continue语句功能:跳过当前循环"></a>continue语句功能:跳过当前循环</h4><ul><li><p>使本次循环结束,即跳过循环体中下面尚未执行的语句,接着进行下一次循环</p></li><li><p>continue只能在循环语句中使用,可以在for循环以及while循环中使用,但不建议用在while循环中使用,容易造成死循环</p></li></ul><p>例1:如果a=4,跳过当前循环</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">4</span>)&#123;             <span class="comment">//如果a==4</span></span><br><span class="line">        <span class="keyword">continue</span>;         <span class="comment">//跳出当前循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);             <span class="comment">//输出: 1235</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2:如果a=4的话结束循环(跳出循环)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">4</span>)&#123;   </span><br><span class="line">        <span class="keyword">break</span>;              <span class="comment">//结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);               <span class="comment">//输出: 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例3:在多层循环中向外跳出一层</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'外层'</span>);              <span class="comment">//输出一个外层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> b=<span class="number">1</span>;b&lt;=<span class="number">3</span>;b++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;             <span class="comment">//当b=2的时候就跳出当前循环 但是外部循环仍在继续</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'内层'</span>);          <span class="comment">//因为内层到2就跳出,所以只有1会打印一次内层</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: </span></span><br><span class="line"><span class="comment">//     外层</span></span><br><span class="line"><span class="comment">//     内层</span></span><br><span class="line"><span class="comment">//     外层</span></span><br><span class="line"><span class="comment">//     内层</span></span><br><span class="line"><span class="comment">//     外层</span></span><br><span class="line"><span class="comment">//     内层</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;String和Num的类型转换 , ++–自增自减 , for循环基础语法 , 二维List和Map和二维for循环 , 循环语句while和do…while , break语句和continue语句的功能&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (二)</title>
    <link href="http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2020-03-24T12:50:23.000Z</published>
    <updated>2020-04-02T13:28:31.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数组 , 字典 , 算术运算符 , 关系运算符 , 逻辑运算符 , 条件表达式 , 三目运算</strong></p><a id="more"></a><h3 id="List定义数组的两种方式"><a href="#List定义数组的两种方式" class="headerlink" title="List定义数组的两种方式"></a>List定义数组的两种方式</h3><ul><li><p>&lt; &gt;指限制数组内容为指定类型</p></li><li><p>数组内容编号从0开始,如: 例1中111为0,abc为1,333为2</p></li><li><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">111</span>,<span class="string">'abc'</span>,<span class="number">333</span>];        <span class="comment">//第一种定义数组的方式</span></span><br><span class="line"><span class="built_in">print</span>(a);                     <span class="comment">//输出[111 abc 333]</span></span><br><span class="line"><span class="built_in">print</span>(a.length);              <span class="comment">//指数组的内容长度,有三个内容所以 输出:3</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>]);                  <span class="comment">//指输出数组a中的0号内容  输出: 111</span></span><br></pre></td></tr></table></figure></li><li><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();     <span class="comment">//第二种定义数组的方式 &lt; &gt;表示限定内容为String字符串内容</span></span><br><span class="line">b.add(<span class="string">'张三'</span>);                <span class="comment">//第二种方法需要用.add方法或者.addall方法给数组添加内容</span></span><br><span class="line">b.add(<span class="number">123</span>);                   <span class="comment">//数组b限制内容为字符串类型 123因为没有带引号所以是数值内容 所以是错误的 X</span></span><br><span class="line">b.add(<span class="string">'李四'</span>);   </span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">1</span>]);                  <span class="comment">//输出数组b的1的内容 因为b.add(123);是错误的内容 需要删除掉 所以1为李四 输出:李四</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Map定义集合的两种方式"><a href="#Map定义集合的两种方式" class="headerlink" title="Map定义集合的两种方式"></a>Map定义集合的两种方式</h3><ul><li><p>例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;   </span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'张三'</span>,       <span class="comment">//定义key'name'的value(内容)为张三</span></span><br><span class="line">    <span class="string">'age'</span>:<span class="number">20</span>             <span class="comment">//定义key'age'的value(内容)为20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(person);           <span class="comment">//输出:&#123;name:张三,age:20&#125;</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">'name'</span>]);   <span class="comment">//输出name的value: 张三</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">'age'</span>]);    <span class="comment">//输出age的value: 20</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">'张三'</span>]);   <span class="comment">//不能使用value来输出key 所以是错误的 X</span></span><br></pre></td></tr></table></figure></li><li><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">p[<span class="string">'name'</span>]=<span class="string">'李四'</span>;                 <span class="comment">//name为key 李四为value  </span></span><br><span class="line">p[<span class="string">'age'</span>]=<span class="number">20</span>;   </span><br><span class="line">p[<span class="string">'work'</span>]=[<span class="string">'送外卖'</span>,<span class="string">'程序员'</span>];     <span class="comment">//同时可在map中掺杂list数组 即work的value可以是一个数组</span></span><br><span class="line"><span class="built_in">print</span>(p);                        <span class="comment">//输出: &#123;name:李四,age:20,work:[送外卖,程序员]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(p[<span class="string">'work'</span>]);                <span class="comment">//单独打印map p中的work的value 输出数组: [送外卖,程序员]</span></span><br><span class="line"><span class="built_in">print</span>(p[<span class="string">'work'</span>][<span class="number">0</span>]);             <span class="comment">//也可以只打印key work的数组value中的0 输出: 送外卖</span></span><br></pre></td></tr></table></figure><h4 id="is判断语句"><a href="#is判断语句" class="headerlink" title="is判断语句"></a>is判断语句</h4><ul><li><p>通过 ‘ is ‘ 关键词判断类型: 当你不知道服务器返回的数据是什么类型可以通过is关键词判断数据类型 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'123'</span>;                      <span class="comment">//定义str为 字符串类型内容是123</span></span><br><span class="line"><span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">String</span>)&#123;                  <span class="comment">//如果str is String</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'str是String类型'</span>);        <span class="comment">//就打印输出</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">int</span>)&#123;               <span class="comment">//否则 如果 str is int</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'str是int类型'</span>);           <span class="comment">//就打印输出</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;                              <span class="comment">//否则</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'其他类型'</span>);               <span class="comment">//打印输出</span></span><br><span class="line">&#125;                                   <span class="comment">//因为是字符串类型所以 输出: str是String类型关系运算符</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><p>关系运算符有:</p><p>==(等于) , !=(不等于) , &gt;(大于) , &lt;(小于) , &gt;=(大于等于) , &lt;=(小于等于)     </p></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>逻辑运算符有:</p><p>!(取反) , &amp;&amp;(并且) , ||(或者)</p></li><li><p>或者||: 全部为false的话值为false,否则值为true</p></li><li><p>并且&amp;&amp;: 全部为true的话值为true,否则值为false</p></li></ul><h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><ul><li><p>赋值运算有:</p><p>=  , ??= ,   ??</p></li><li><p>??= :表示如果b为空的话吧23赋值给b</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:                                           例<span class="number">2</span>:</span><br><span class="line"><span class="built_in">int</span> b;   <span class="comment">//定义一个int类型的b 没有赋值            int b=3;   //定义一个int类型b 赋值3   </span></span><br><span class="line">b??=<span class="number">23</span>;  <span class="comment">//b??=23                               b??=23;    //b??=23</span></span><br><span class="line"><span class="built_in">print</span>(b);<span class="comment">//因为b没有赋值所以输出: 23              print(b);   //因为b有赋值3 所以输出: 3</span></span><br></pre></td></tr></table></figure></li><li><p>??: 表示如果 a??10  a为空,则吧10赋予a,如果a自有数值则不赋予,例1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;          <span class="comment">//定义一个a 内容为空</span></span><br><span class="line"><span class="keyword">var</span> b=a??<span class="number">10</span>;    <span class="comment">//b=a??10 从右往左看先看a??10,因为a为空所以吧10赋予a  然后在看b=a  所以b=10</span></span><br><span class="line"><span class="built_in">print</span>(b);       <span class="comment">//输出: 10</span></span><br></pre></td></tr></table></figure><p>例2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">22</span>;      <span class="comment">//赋值a=22</span></span><br><span class="line"><span class="keyword">var</span> b=a??<span class="number">10</span>;   <span class="comment">//因为a有内容所以并不会吧10赋予a所以a=22 所以b=a的时候b=22</span></span><br><span class="line"><span class="built_in">print</span>(b);      <span class="comment">//输出: 22</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="复合赋值运算"><a href="#复合赋值运算" class="headerlink" title="复合赋值运算"></a>复合赋值运算</h3><ul><li><p>+= , -= ,  *= , /= , %=(取余) , ~/=(取整)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a+=<span class="number">10</span>  <span class="comment">//表示a=a+10;</span></span><br><span class="line">a*=<span class="number">10</span>  <span class="comment">//表示a=a*10;</span></span><br><span class="line">a~/=<span class="number">10</span> <span class="comment">//表示a=a~/10;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><ul><li><p>条件表达式有很多种</p><p>如:’if….else’     ‘switch…..case’</p></li><li><p>switch….case的使用方法如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex=<span class="string">'女'</span>;                 <span class="comment">//switch(开关)   case(具体,事例)</span></span><br><span class="line"><span class="keyword">switch</span>(sex)&#123;                  <span class="comment">//switch sex</span></span><br><span class="line">        <span class="keyword">case</span><span class="string">'男'</span>:             <span class="comment">//case 男</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'他是男的'</span>);     <span class="comment">//打印输出</span></span><br><span class="line">        <span class="keyword">break</span>;                <span class="comment">//结束</span></span><br><span class="line">        <span class="keyword">case</span><span class="string">'女'</span>:             <span class="comment">//case 女</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'她是女的'</span>);     <span class="comment">//打印输出</span></span><br><span class="line">        <span class="keyword">break</span>;                <span class="comment">//结束</span></span><br><span class="line">    <span class="keyword">default</span>:                  <span class="comment">//如果两个case都不对</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'传入数据错误'</span>);  <span class="comment">//打印输出</span></span><br><span class="line">        <span class="keyword">break</span>;                 <span class="comment">//结束</span></span><br><span class="line">&#125;                              <span class="comment">//因为case是女所以输出: 她是女的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><ul><li><p>例1: 如果flag=true,吧’我是true’赋予c</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> flag=<span class="keyword">true</span>;          <span class="comment">//bool类型flag定义为true</span></span><br><span class="line"><span class="keyword">var</span> c;                   <span class="comment">//定义一个C 内容为空</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;   </span><br><span class="line">    c=<span class="string">'我是true'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    c=<span class="string">'我是false'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(c);                <span class="comment">//输出: 我是true</span></span><br></pre></td></tr></table></figure><p>吧正常if else 转换为三目预算来减化为:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">String</span> c=flag?<span class="string">'我是true'</span>:<span class="string">'我是false'</span>;   <span class="comment">//?为if,:为else</span></span><br><span class="line"><span class="built_in">print</span>(c);                              <span class="comment">//输出: 我是true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;数组 , 字典 , 算术运算符 , 关系运算符 , 逻辑运算符 , 条件表达式 , 三目运算&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart学习笔记 (一)</title>
    <link href="http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/03/24/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2020-03-24T08:55:58.000Z</published>
    <updated>2020-04-10T15:02:53.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>古今中外有学问的人，有成就的人，总是十分注意积累的。知识就是机积累起来的，经验也是积累起来的。我们对什么事情都不应该像“过眼云烟”</p><p>​                                                                                                                                                                                <strong>邓拓</strong></p></blockquote><p><strong>入口 , 变量 , 常量 , 常用数据类型 , 字符串的拼接 , 布尔类型</strong></p><h1 id="Dart语言"><a href="#Dart语言" class="headerlink" title="Dart语言"></a>Dart语言</h1><h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><p>​         <strong>Dart是一种面向对象的语言,Dart的所有东西都是对象,所有的对象都继承自object类。</strong>Dart是一门使用类和单继承的面向对象语言,所有对象都是类的实例。并且所有的类都是object的子类。Dart与其他的面向对象语言不一样,Dart中没有public,private,protected这些访问修饰符号,但我们可以使用_下划线把一个属性或者方法定义为私有。</p><ul><li><p>面向对象编程(oop)的三个基本特征是: </p><p><strong>封装:</strong> 系统具有相同数据结构与行为的所有对象可组成一类；</p><p><strong>继承:</strong> 在基本层次关系的不同类中共享数据和操作。</p><p><a href="https://baike.baidu.com/item/多态" target="_blank" rel="noopener"><strong>多态:</strong></a>（Polymorphism）按字面的意思就是“多种状态”。在<a href="https://baike.baidu.com/item/面向对象语言/215742" target="_blank" rel="noopener">面向对象语言</a>中，接口的多种不同的实现方式即为多态。引用Charlie Calverts对多态的描述——多态性是允许你将父对象设置成为一个或更多的他的<a href="https://baike.baidu.com/item/子对象/11001276" target="_blank" rel="noopener">子对象</a>相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作（摘自“Delphi4 <a href="https://baike.baidu.com/item/编程技术/2646621" target="_blank" rel="noopener">编程技术</a>内幕”）。简单的说，就是一句话：允许将子类类型的<a href="https://baike.baidu.com/item/指针/2878304" target="_blank" rel="noopener">指针</a>赋值给父类类型的指针。多态性在Object Pascal和C++中都是通过<a href="https://baike.baidu.com/item/虚函数/2912832" target="_blank" rel="noopener">虚函数</a>实现的。 <a href="https://nianchuqing.github.io/2020/04/10/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/#%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9A%E4%B9%89" target="_blank" rel="noopener"><strong>Dart中的例子</strong></a></p><a id="more"></a></li><li><p>入口方法main</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;              <span class="comment">//没有返回值的入口方法       </span></span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;                  <span class="comment">//入口方法</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>打印方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'你好Hexo'</span>);    <span class="comment">//输出:你好Hexo</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3></li><li><p>变量必须由<u><strong>数字</strong></u>,<strong><u>字母</u></strong>,<strong><u>下划线</u></strong>和<strong><u>美元符</u></strong>号组成  </p></li><li><p>标识符不能由<strong><u>数字</u></strong>开头  如错误示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="number">123</span>str=<span class="number">123</span>;      <span class="comment">//错误示例</span></span><br></pre></td></tr></table></figure></li><li><p>标识符不能是<strong><u>保留字</u></strong> ,<u><strong>关键字</strong></u>  如错误示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">int</span>=<span class="number">123</span>;        <span class="comment">//错误示例</span></span><br></pre></td></tr></table></figure></li><li><p>变量的名字是区分大小写的  如:<strong><u>age</u></strong>和<strong><u>Age</u></strong>应为两个不同的变量。在实际的运用中,也建议不要使用同一个。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">10</span>;         <span class="comment">//这是两个不同的变量</span></span><br><span class="line"><span class="keyword">var</span> Age=<span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>标识符一定要见名思意,变量名称建议用名词,方法名称用动词。</p></li><li><p><strong><u>Var</u></strong>会自动判断变量类型,不能和<strong><u>String</u></strong>   <strong><u>int</u></strong>一起使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字类型不用带'引号',字符串类型须带上'引号',"双引号"和'单引号'效果一样,Dart有类型效验。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">'你好'</span>;   </span><br><span class="line"><span class="built_in">print</span>(str);        <span class="comment">//自动变量 打印出:你好</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">num</span>=<span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span>);        <span class="comment">//自动变量 打印出:123</span></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="built_in">String</span> str=<span class="string">'你好'</span>;</span><br><span class="line"><span class="built_in">print</span>(str);        <span class="comment">//字符串类型 打印出:你好</span></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">num</span>=<span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span>);        <span class="comment">//数字类型 打印出:123</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li><p>常量是不改变的量</p></li><li><p>变量可以修改,常量不可以修改</p></li><li><p><strong><u>const</u></strong>和<strong><u>final</u></strong>都是常量,但final更强大,const值不变一开始就要赋值;final可以开始不赋值,只能赋值一次,而且final不仅有const的<strong><u>编译时常量</u></strong>的特性,最重要的是它是<strong><u>运行时常量</u></strong>,<strong>惰性初始化</strong>,即在运行时第一次使用前才初始化 例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="number">3.1415926</span>;            <span class="comment">//编译时常量</span></span><br><span class="line"><span class="built_in">print</span>(a);                     <span class="comment">//打印出:3.1415926</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> a=<span class="keyword">new</span> <span class="built_in">DateTime</span>.now();   <span class="comment">//运行时常量</span></span><br><span class="line"><span class="built_in">print</span>(a);                     <span class="comment">//打印出:2019.9.17. 14:37:54:722292</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ul><li><p><strong>Number</strong>(数值):</p><p>int:整数 整型 , double:小数  浮点型</p></li><li><p><strong>String</strong>(字符串):</p><p>String:字符串</p></li><li><p><strong>Booleans</strong>(布尔):</p><p>bool:<strong>true</strong>对 , <strong>false</strong>错</p></li><li><p><strong>List</strong>(数组):</p><p>list:数组,在Dart中,数组是列表对象,所以大多数人称为列表</p></li><li><p><strong>Map</strong>(字典):</p><p>map:字典</p></li><li><p>运算符中一旦有用double的数据,结果也会变成浮点型  如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">double</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">print</span>(a+b);   <span class="comment">//输出:3.0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><ul><li><p>三对’’’引号’’’可写多层代码  如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str=<span class="string">'''123</span></span><br><span class="line"><span class="string">456</span></span><br><span class="line"><span class="string">    789'''</span>;</span><br><span class="line"><span class="built_in">print</span>(str);   </span><br><span class="line">输出:<span class="number">123</span></span><br><span class="line">  <span class="number">456</span></span><br><span class="line">      <span class="number">789</span></span><br></pre></td></tr></table></figure></li><li><p>字符串的拼接  如:</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line"><span class="built_in">String</span> str1=<span class="string">'你好'</span>;</span><br><span class="line"><span class="built_in">String</span> str2=<span class="string">'Dart'</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$str1</span><span class="subst">$str2</span>'</span>);      <span class="comment">//输出:你好Dart</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$str1</span>  <span class="subst">$str2</span>'</span>);    <span class="comment">//输出:你好  Dart</span></span><br><span class="line"><span class="built_in">print</span>(str1+str2);         <span class="comment">//输出:你好Dart</span></span><br><span class="line"><span class="built_in">print</span>(str1 + str2);       <span class="comment">//输出:你好Dart</span></span><br><span class="line"><span class="built_in">print</span>(str1+<span class="string">' '</span>+str2);     <span class="comment">//输出:你好 Dart</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li><p>布尔类型是条件判断语句</p><p>使用if…else和true , false做判断:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line"><span class="keyword">var</span> dan=<span class="keyword">false</span>;   <span class="comment">//定义dan为false</span></span><br><span class="line"><span class="keyword">if</span>(dan)&#123;         <span class="comment">//如果dan为true</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'真'</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;           <span class="comment">//否则</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'假'</span>);</span><br><span class="line">&#125;                <span class="comment">//输出:假</span></span><br><span class="line">例<span class="number">2</span>:</span><br><span class="line"><span class="built_in">int</span> a=<span class="number">12</span>;</span><br><span class="line"><span class="built_in">double</span> b=<span class="number">13</span>;</span><br><span class="line"><span class="keyword">if</span>(a==b)&#123;        <span class="comment">//假如a=b</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'a=b'</span>);   </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'a!=b'</span>);</span><br><span class="line">&#125;                <span class="comment">//输出:a!=b (a不等于b)</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;古今中外有学问的人，有成就的人，总是十分注意积累的。知识就是机积累起来的，经验也是积累起来的。我们对什么事情都不应该像“过眼云烟”&lt;/p&gt;
&lt;p&gt;​                                                                                                                                                                                &lt;strong&gt;邓拓&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;入口 , 变量 , 常量 , 常用数据类型 , 字符串的拼接 , 布尔类型&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;Dart语言&quot;&gt;&lt;a href=&quot;#Dart语言&quot; class=&quot;headerlink&quot; title=&quot;Dart语言&quot;&gt;&lt;/a&gt;Dart语言&lt;/h1&gt;&lt;h3 id=&quot;Dart&quot;&gt;&lt;a href=&quot;#Dart&quot; class=&quot;headerlink&quot; title=&quot;Dart&quot;&gt;&lt;/a&gt;Dart&lt;/h3&gt;&lt;p&gt;​         &lt;strong&gt;Dart是一种面向对象的语言,Dart的所有东西都是对象,所有的对象都继承自object类。&lt;/strong&gt;Dart是一门使用类和单继承的面向对象语言,所有对象都是类的实例。并且所有的类都是object的子类。Dart与其他的面向对象语言不一样,Dart中没有public,private,protected这些访问修饰符号,但我们可以使用_下划线把一个属性或者方法定义为私有。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;面向对象编程(oop)的三个基本特征是: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;封装:&lt;/strong&gt; 系统具有相同数据结构与行为的所有对象可组成一类；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继承:&lt;/strong&gt; 在基本层次关系的不同类中共享数据和操作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/多态&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;多态:&lt;/strong&gt;&lt;/a&gt;（Polymorphism）按字面的意思就是“多种状态”。在&lt;a href=&quot;https://baike.baidu.com/item/面向对象语言/215742&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向对象语言&lt;/a&gt;中，接口的多种不同的实现方式即为多态。引用Charlie Calverts对多态的描述——多态性是允许你将父对象设置成为一个或更多的他的&lt;a href=&quot;https://baike.baidu.com/item/子对象/11001276&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;子对象&lt;/a&gt;相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作（摘自“Delphi4 &lt;a href=&quot;https://baike.baidu.com/item/编程技术/2646621&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;编程技术&lt;/a&gt;内幕”）。简单的说，就是一句话：允许将子类类型的&lt;a href=&quot;https://baike.baidu.com/item/指针/2878304&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;指针&lt;/a&gt;赋值给父类类型的指针。多态性在Object Pascal和C++中都是通过&lt;a href=&quot;https://baike.baidu.com/item/虚函数/2912832&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;虚函数&lt;/a&gt;实现的。 &lt;a href=&quot;https://nianchuqing.github.io/2020/04/10/Dart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/#%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9A%E4%B9%89&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Dart中的例子&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>NewDay 新的开始</title>
    <link href="http://yoursite.com/2020/03/23/newpapername/"/>
    <id>http://yoursite.com/2020/03/23/newpapername/</id>
    <published>2020-03-23T11:28:18.000Z</published>
    <updated>2020-03-23T16:49:28.895Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客 我正在努力客制化中~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到我的博客 我正在努力客制化中~&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
